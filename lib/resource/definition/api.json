{
    "Permissions": {
        "name": "Permissions",
        "description": "Provide permission information for the current user.",
        "methods": {
            "myPermissions": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "projectKey",
                        "type": "string",
                        "description": "- key of project to scope returned permissions for."
                    },
                    {
                        "name": "projectId",
                        "type": "string",
                        "description": "- id of project to scope returned permissions for."
                    },
                    {
                        "name": "issueKey",
                        "type": "string",
                        "description": "- key of the issue to scope returned permissions for."
                    },
                    {
                        "name": "issueId",
                        "type": "string",
                        "description": "- id of the issue to scope returned permissions for."
                    }
                ],
                "description": "Get permissions",
                "name": "myPermissions",
                "details": "Returns all permissions in the system and whether the currently logged in user has them. You can optionally provide a specific context to get permissions for\n (projectKey OR projectId OR issueKey OR issueId)\n \n  When no context supplied the project related permissions will return true if the user has that permission in ANY project \n  If a project context is provided, project related permissions will return true if the user has the permissions in the specified project.\n For permissions that are determined using issue data (e.g Current Assignee), true will be returned if the user meets the permission criteria in ANY issue in that project \n  If an issue context is provided, it will return whether or not the user has each permission in that specific issue\n \n \n NB: The above means that for issue-level permissions (EDIT_ISSUE for example), hasPermission may be true when no context is provided, or when a project context is provided,\n but may be false for any given (or all) issues. This would occur (for example) if Reporters were given the EDIT_ISSUE permission. This is because\n any user could be a reporter, except in the context of a concrete issue, where the reporter is known.\n \n Global permissions will still be returned for all scopes.\n \n Prior to version 6.4 this service returned project permissions with keys corresponding to com.atlassian.jira.security.Permissions.Permission constants.\n Since 6.4 those keys are considered deprecated and this service returns system project permission keys corresponding to constants defined in com.atlassian.jira.permission.ProjectPermissions.\n Permissions with legacy keys are still also returned for backwards compatibility, they are marked with an attribute deprecatedKey=true.\n The attribute is missing for project permissions with the current keys.\n - key of project to scope returned permissions for.- id of project to scope returned permissions for.- key of the issue to scope returned permissions for.- id of the issue to scope returned permissions for.",
                "verb": "GET",
                "url": "rest/api/2/mypermissions",
                "path": "/mypermissions",
                "responseType": "object"
            },
            "find": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get all permissions",
                "name": "find",
                "details": "Returns all permissions that are present in the JIRA instance - Global, Project and the global ones added by plugins",
                "verb": "GET",
                "url": "rest/api/2/permissions",
                "path": "/",
                "responseType": "object"
            }
        }
    },
    "ApplicationProperties": {
        "name": "ApplicationProperties",
        "description": "",
        "methods": {
            "getProperty": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "key",
                        "type": "string",
                        "description": "a String containing the property key"
                    },
                    {
                        "name": "permissionLevel",
                        "type": "string",
                        "description": "when fetching a list specifies the permission level of all items in the list\n                        see {@link com.atlassian.jira.bc.admin.ApplicationPropertiesService.EditPermissionLevel}"
                    },
                    {
                        "name": "keyFilter",
                        "type": "string",
                        "description": "when fetching a list allows the list to be filtered by the property's start of key\n                        e.g. \"jira.lf.*\" whould fetch only those permissions that are editable and whose keys start with\n                        \"jira.lf.\". This is a regex."
                    }
                ],
                "description": "Get property",
                "name": "getProperty",
                "details": "Returns an application property.a String containing the property keywhen fetching a list specifies the permission level of all items in the list\n                        see {@link com.atlassian.jira.bc.admin.ApplicationPropertiesService.EditPermissionLevel}when fetching a list allows the list to be filtered by the property's start of key\n                        e.g. \"jira.lf.*\" whould fetch only those permissions that are editable and whose keys start with\n                        \"jira.lf.\". This is a regex.",
                "verb": "GET",
                "url": "rest/api/2/application-properties",
                "path": "/",
                "responseType": "array"
            },
            "setPropertyViaRestfulTable": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Set property via restful table",
                "name": "setPropertyViaRestfulTable",
                "details": "Modify an application property via PUT. The \"value\" field present in the PUT will override the existing value.",
                "verb": "PUT",
                "url": "rest/api/2/application-properties/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "getAdvancedSettings": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get advanced settings",
                "name": "getAdvancedSettings",
                "details": "Returns the properties that are displayed on the \"General Configuration > Advanced Settings\" page.",
                "verb": "GET",
                "url": "rest/api/2/application-properties/advanced-settings",
                "path": "/advanced-settings",
                "responseType": "array"
            }
        }
    },
    "Applicationrole": {
        "name": "Applicationrole",
        "description": "Provides REST access to JIRA's Application Roles.",
        "methods": {
            "putBulk": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "If-Match",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Put bulk",
                "name": "putBulk",
                "details": "Updates the ApplicationRoles with the passed data if the version hash is the same as the server.\n Only the groups and default groups setting of the role may be updated. Requests to change the key\n or the name of the role will be silently ignored. It is acceptable to pass only the roles that are updated\n as roles that are present in the server but not in data to update with, will not be deleted.",
                "verb": "PUT",
                "url": "rest/api/2/applicationrole",
                "path": "/",
                "responseType": "array"
            },
            "getAll": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get all",
                "name": "getAll",
                "details": "Returns all ApplicationRoles in the system. Will also return an ETag header containing a version hash of the\n collection of ApplicationRoles.",
                "verb": "GET",
                "url": "rest/api/2/applicationrole",
                "path": "/",
                "responseType": "array"
            },
            "get": {
                "urlParams": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get",
                "name": "get",
                "details": "Returns the ApplicationRole with passed key if it exists.",
                "verb": "GET",
                "url": "rest/api/2/applicationrole/:key",
                "path": "/:key",
                "responseType": "object"
            },
            "put": {
                "urlParams": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "groups",
                        "type": "array"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "defaultGroups",
                        "type": "array"
                    },
                    {
                        "name": "selectedByDefault",
                        "type": "boolean"
                    },
                    {
                        "name": "defined",
                        "type": "boolean"
                    },
                    {
                        "name": "numberOfSeats",
                        "type": "integer"
                    },
                    {
                        "name": "remainingSeats",
                        "type": "integer"
                    },
                    {
                        "name": "userCount",
                        "type": "integer"
                    },
                    {
                        "name": "userCountDescription",
                        "type": "string"
                    },
                    {
                        "name": "hasUnlimitedSeats",
                        "type": "boolean"
                    },
                    {
                        "name": "platform",
                        "type": "boolean"
                    }
                ],
                "queryParams": [
                    {
                        "name": "If-Match",
                        "type": "string",
                        "description": "the hash of the version to update. Optional Param"
                    }
                ],
                "description": "Put",
                "name": "put",
                "details": "Updates the ApplicationRole with the passed data. Only the groups and default groups setting of the\n role may be updated. Requests to change the key or the name of the role will be silently ignored.\n \n Optional: If versionHash is passed through the If-Match header the request will be rejected if not the\n same as serverthe hash of the version to update. Optional Param",
                "verb": "PUT",
                "url": "rest/api/2/applicationrole/:key",
                "path": "/:key",
                "responseType": "object"
            }
        }
    },
    "Attachment": {
        "name": "Attachment",
        "description": "",
        "methods": {
            "findById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get attachment",
                "name": "findById",
                "details": "Returns the meta-data for an attachment, including the URI of the actual attached file.",
                "verb": "GET",
                "url": "rest/api/2/attachment/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "deleteById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Remove attachment",
                "name": "deleteById",
                "details": "Remove an attachment from an issue.",
                "verb": "DELETE",
                "url": "rest/api/2/attachment/:id",
                "path": "/:id",
                "responseType": null
            },
            "expandForHumans": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Expand for humans",
                "name": "expandForHumans",
                "details": "Tries to expand an attachment. Output is human-readable and subject to change.",
                "verb": "GET",
                "url": "rest/api/2/attachment/:id/expand/human",
                "path": "/:id/expand/human",
                "responseType": "object"
            },
            "expandForMachines": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Expand for machines",
                "name": "expandForMachines",
                "details": "Tries to expand an attachment. Output is raw and should be backwards-compatible through the course of time.",
                "verb": "GET",
                "url": "rest/api/2/attachment/:id/expand/raw",
                "path": "/:id/expand/raw",
                "responseType": "object"
            },
            "getAttachmentMeta": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get attachment meta",
                "name": "getAttachmentMeta",
                "details": "Returns the meta information for an attachments, specifically if they are enabled and the maximum upload size\n allowed.",
                "verb": "GET",
                "url": "rest/api/2/attachment/meta",
                "path": "/meta",
                "responseType": "object"
            }
        }
    },
    "Auditing": {
        "name": "Auditing",
        "description": "Resource representing the auditing records",
        "methods": {
            "getRecords": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "offset",
                        "type": "number",
                        "description": "- the number of record from which search starts"
                    },
                    {
                        "name": "limit",
                        "type": "number",
                        "description": "- maximum number of returned results (if is limit is  1000, it will be set do default value: 1000)"
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "description": "- text query; each record that will be returned must contain the provided text in one of its fields"
                    },
                    {
                        "name": "from",
                        "type": "string",
                        "description": "- timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty\n               only records that where created in the same moment or after the 'from' timestamp will be provided in response"
                    },
                    {
                        "name": "to",
                        "type": "string",
                        "description": "- timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty\n               only records that where created in the same moment or earlier than the 'to' timestamp will be provided in response"
                    }
                ],
                "description": "Get records",
                "name": "getRecords",
                "details": "Returns auditing records filtered using provided parameters- the number of record from which search starts- maximum number of returned results (if is limit is  1000, it will be set do default value: 1000)- text query; each record that will be returned must contain the provided text in one of its fields- timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty\n               only records that where created in the same moment or after the 'from' timestamp will be provided in response- timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty\n               only records that where created in the same moment or earlier than the 'to' timestamp will be provided in response",
                "verb": "GET",
                "url": "rest/api/2/auditing/record",
                "path": "/record",
                "responseType": "object"
            },
            "addRecord": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "id",
                        "type": "integer"
                    },
                    {
                        "name": "summary",
                        "type": "string"
                    },
                    {
                        "name": "remoteAddress",
                        "type": "string"
                    },
                    {
                        "name": "authorKey",
                        "type": "string"
                    },
                    {
                        "name": "created",
                        "type": "string"
                    },
                    {
                        "name": "category",
                        "type": "string"
                    },
                    {
                        "name": "eventSource",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "objectItem",
                        "type": "Object"
                    },
                    {
                        "name": "changedValues",
                        "type": "array"
                    },
                    {
                        "name": "associatedItems",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Add record",
                "name": "addRecord",
                "details": "Store a record in Audit Log",
                "verb": "POST",
                "url": "rest/api/2/auditing/record",
                "path": "/record",
                "responseType": null
            }
        }
    },
    "Avatar": {
        "name": "Avatar",
        "description": "",
        "methods": {
            "getAllSystemAvatars": {
                "urlParams": [
                    {
                        "name": "type",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get all system avatars",
                "name": "getAllSystemAvatars",
                "details": "Returns all system avatars of the given type.",
                "verb": "GET",
                "url": "rest/api/2/avatar/:type/system",
                "path": "/:type/system",
                "responseType": "object"
            },
            "storeTemporaryAvatar": {
                "urlParams": [
                    {
                        "name": "type",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": "name of file being uploaded"
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": "size of file"
                    }
                ],
                "description": "Store temporary avatar",
                "name": "storeTemporaryAvatar",
                "details": "Creates temporary avatarname of file being uploadedsize of file",
                "verb": "POST",
                "url": "rest/api/2/avatar/:type/temporary",
                "path": "/:type/temporary",
                "responseType": "object"
            },
            "createAvatarFromTemporary": {
                "urlParams": [
                    {
                        "name": "type",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "cropperWidth",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetX",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetY",
                        "type": "integer"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "needsCropping",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Create avatar from temporary",
                "name": "createAvatarFromTemporary",
                "details": "Updates the cropping instructions of the temporary avatar.",
                "verb": "POST",
                "url": "rest/api/2/avatar/:type/temporaryCrop",
                "path": "/:type/temporaryCrop",
                "responseType": null
            }
        }
    },
    "ClusterZdu": {
        "name": "ClusterZdu",
        "description": "",
        "methods": {
            "approveUpgrade": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Approve upgrade",
                "name": "approveUpgrade",
                "details": "",
                "verb": "POST",
                "url": "rest/api/2/cluster/zdu/approve",
                "path": "/zdu/approve",
                "responseType": null
            },
            "cancelUpgrade": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Cancel upgrade",
                "name": "cancelUpgrade",
                "details": "",
                "verb": "POST",
                "url": "rest/api/2/cluster/zdu/cancel",
                "path": "/zdu/cancel",
                "responseType": null
            },
            "setReadyToUpgrade": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Set ready to upgrade",
                "name": "setReadyToUpgrade",
                "details": "",
                "verb": "POST",
                "url": "rest/api/2/cluster/zdu/start",
                "path": "/zdu/start",
                "responseType": null
            },
            "getState": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get state",
                "name": "getState",
                "details": "",
                "verb": "GET",
                "url": "rest/api/2/cluster/zdu/state",
                "path": "/zdu/state",
                "responseType": null
            }
        }
    },
    "CommentProperties": {
        "name": "CommentProperties",
        "description": "",
        "methods": {
            "getPropertiesKeys": {
                "urlParams": [
                    {
                        "name": "commentId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get properties keys",
                "name": "getPropertiesKeys",
                "details": "Returns the keys of all properties for the comment identified by the key or by the id.",
                "verb": "GET",
                "url": "rest/api/2/comment/:commentId/properties",
                "path": "/:commentId/properties",
                "responseType": "object"
            },
            "deleteProperty": {
                "urlParams": [
                    {
                        "name": "commentId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete property",
                "name": "deleteProperty",
                "details": "Removes the property from the comment identified by the key or by the id. Ths user removing the property is required\n to have permissions to administer the comment.",
                "verb": "DELETE",
                "url": "rest/api/2/comment/:commentId/properties/:propertyKey",
                "path": "/:commentId/properties/:propertyKey",
                "responseType": null
            },
            "setProperty": {
                "urlParams": [
                    {
                        "name": "commentId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Set property",
                "name": "setProperty",
                "details": "Sets the value of the specified comment's property.\n \n You can use this resource to store a custom data against the comment identified by the key or by the id. The user\n who stores the data is required to have permissions to administer the comment.\n ",
                "verb": "PUT",
                "url": "rest/api/2/comment/:commentId/properties/:propertyKey",
                "path": "/:commentId/properties/:propertyKey",
                "responseType": null
            },
            "getProperty": {
                "urlParams": [
                    {
                        "name": "commentId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get property",
                "name": "getProperty",
                "details": "Returns the value of the property with a given key from the comment identified by the key or by the id. The user who retrieves\n the property is required to have permissions to read the comment.",
                "verb": "GET",
                "url": "rest/api/2/comment/:commentId/properties/:propertyKey",
                "path": "/:commentId/properties/:propertyKey",
                "responseType": "object"
            }
        }
    },
    "Component": {
        "name": "Component",
        "description": "",
        "methods": {
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "lead",
                        "type": "Object"
                    },
                    {
                        "name": "leadUserName",
                        "type": "string"
                    },
                    {
                        "name": "assigneeType",
                        "type": "string"
                    },
                    {
                        "name": "assignee",
                        "type": "Object"
                    },
                    {
                        "name": "realAssigneeType",
                        "type": "string"
                    },
                    {
                        "name": "realAssignee",
                        "type": "Object"
                    },
                    {
                        "name": "isAssigneeTypeValid",
                        "type": "boolean"
                    },
                    {
                        "name": "project",
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "type": "integer"
                    }
                ],
                "queryParams": [],
                "description": "Create component",
                "name": "create",
                "details": "Create a component via POST.",
                "verb": "POST",
                "url": "rest/api/2/component",
                "path": "/",
                "responseType": "object"
            },
            "update": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "lead",
                        "type": "Object"
                    },
                    {
                        "name": "leadUserName",
                        "type": "string"
                    },
                    {
                        "name": "assigneeType",
                        "type": "string"
                    },
                    {
                        "name": "assignee",
                        "type": "Object"
                    },
                    {
                        "name": "realAssigneeType",
                        "type": "string"
                    },
                    {
                        "name": "realAssignee",
                        "type": "Object"
                    },
                    {
                        "name": "isAssigneeTypeValid",
                        "type": "boolean"
                    },
                    {
                        "name": "project",
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "type": "integer"
                    }
                ],
                "queryParams": [],
                "description": "Update component",
                "name": "update",
                "details": "Modify a component via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field\n is not present, it is silently ignored.\n \n If leadUserName is an empty string (\"\") the component lead will be removed.",
                "verb": "PUT",
                "url": "rest/api/2/component/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get component",
                "name": "findById",
                "details": "Returns a project component.",
                "verb": "GET",
                "url": "rest/api/2/component/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "delete": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "moveIssuesTo",
                        "type": "string",
                        "description": "The new component applied to issues whose 'id' component will be deleted.\n                     If this value is null, then the 'id' component is simply removed from the related isues."
                    }
                ],
                "description": "Delete",
                "name": "delete",
                "details": "Delete a project component.The new component applied to issues whose 'id' component will be deleted.\n                     If this value is null, then the 'id' component is simply removed from the related isues.",
                "verb": "DELETE",
                "url": "rest/api/2/component/:id",
                "path": "/:id",
                "responseType": null
            },
            "getComponentRelatedIssues": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get component related issues",
                "name": "getComponentRelatedIssues",
                "details": "Returns counts of issues related to this component.",
                "verb": "GET",
                "url": "rest/api/2/component/:id/relatedIssueCounts",
                "path": "/:id/relatedIssueCounts",
                "responseType": "object"
            }
        }
    },
    "Configuration": {
        "name": "Configuration",
        "description": "",
        "methods": {
            "findById": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get configuration",
                "name": "findById",
                "details": "Returns the information if the optional features in JIRA are enabled or disabled. If the time tracking is enabled,\n it also returns the detailed information about time tracking configuration.",
                "verb": "GET",
                "url": "rest/api/2/configuration",
                "path": "/",
                "responseType": "object"
            }
        }
    },
    "CustomFieldOption": {
        "name": "CustomFieldOption",
        "description": "",
        "methods": {
            "findById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get custom field option",
                "name": "findById",
                "details": "Returns a full representation of the Custom Field Option that has the given id.",
                "verb": "GET",
                "url": "rest/api/2/customFieldOption/:id",
                "path": "/:id",
                "responseType": "object"
            }
        }
    },
    "Dashboard": {
        "name": "Dashboard",
        "description": "The /dashboard resource.",
        "methods": {
            "list": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "filter\"favourite\"\"my\"",
                        "type": "string",
                        "description": "an optional filter that is applied to the list of dashboards. Valid values include\n                        \"favourite\" for returning only favourite dashboards, and \"my\" for returning\n                        dashboards that are owned by the calling user."
                    },
                    {
                        "name": "startAtmaxResults",
                        "type": "number",
                        "description": "the index of the first dashboard to return (0-based). must be 0 or a multiple of\n                        maxResults"
                    },
                    {
                        "name": "maxResultsmaxResultsmaxResults",
                        "type": "number",
                        "description": "a hint as to the the maximum number of dashboards to return in each call. Note that the\n                        JIRA server reserves the right to impose a maxResults limit that is lower than the value that a\n                        client provides, dues to lack or resources or any other condition. When this happens, your results will be\n                        truncated. Callers should always check the returned maxResults to determine the value that is\n                        effectively being used."
                    }
                ],
                "description": "List",
                "name": "list",
                "details": "Returns a list of all dashboards, optionally filtering them.an optional filter that is applied to the list of dashboards. Valid values include\n                        \"favourite\" for returning only favourite dashboards, and \"my\" for returning\n                        dashboards that are owned by the calling user.the index of the first dashboard to return (0-based). must be 0 or a multiple of\n                        maxResultsa hint as to the the maximum number of dashboards to return in each call. Note that the\n                        JIRA server reserves the right to impose a maxResults limit that is lower than the value that a\n                        client provides, dues to lack or resources or any other condition. When this happens, your results will be\n                        truncated. Callers should always check the returned maxResults to determine the value that is\n                        effectively being used.",
                "verb": "GET",
                "url": "rest/api/2/dashboard",
                "path": "/",
                "responseType": "object"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get dashboard",
                "name": "findById",
                "details": "Returns a single dashboard.",
                "verb": "GET",
                "url": "rest/api/2/dashboard/:id",
                "path": "/:id",
                "responseType": "object"
            }
        }
    },
    "DashboardItemsProperties": {
        "name": "DashboardItemsProperties",
        "description": "",
        "methods": {
            "getPropertiesKeys": {
                "urlParams": [
                    {
                        "name": "dashboardId",
                        "type": "string"
                    },
                    {
                        "name": "itemId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get properties keys",
                "name": "getPropertiesKeys",
                "details": "Returns the keys of all properties for the dashboard item identified by the id.",
                "verb": "GET",
                "url": "rest/api/2/dashboard/:dashboardId/items/:itemId/properties",
                "path": "/:dashboardId/items/:itemId/properties",
                "responseType": "object"
            },
            "deleteProperty": {
                "urlParams": [
                    {
                        "name": "dashboardId",
                        "type": "string"
                    },
                    {
                        "name": "itemId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete property",
                "name": "deleteProperty",
                "details": "Removes the property from the dashboard item identified by the key or by the id. Ths user removing the property is required\n to have permissions to administer the dashboard item.",
                "verb": "DELETE",
                "url": "rest/api/2/dashboard/:dashboardId/items/:itemId/properties/:propertyKey",
                "path": "/:dashboardId/items/:itemId/properties/:propertyKey",
                "responseType": null
            },
            "setProperty": {
                "urlParams": [
                    {
                        "name": "dashboardId",
                        "type": "string"
                    },
                    {
                        "name": "itemId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Set property",
                "name": "setProperty",
                "details": "Sets the value of the specified dashboard item's property.\n \n You can use this resource to store a custom data against the dashboard item identified by the id.\n The user who stores the data is required to have permissions to administer the dashboard item.\n ",
                "verb": "PUT",
                "url": "rest/api/2/dashboard/:dashboardId/items/:itemId/properties/:propertyKey",
                "path": "/:dashboardId/items/:itemId/properties/:propertyKey",
                "responseType": null
            },
            "getProperty": {
                "urlParams": [
                    {
                        "name": "dashboardId",
                        "type": "string"
                    },
                    {
                        "name": "itemId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get property",
                "name": "getProperty",
                "details": "Returns the value of the property with a given key from the dashboard item identified by the id.\n The user who retrieves the property is required to have permissions to read the dashboard item.",
                "verb": "GET",
                "url": "rest/api/2/dashboard/:dashboardId/items/:itemId/properties/:propertyKey",
                "path": "/:dashboardId/items/:itemId/properties/:propertyKey",
                "responseType": "object"
            }
        }
    },
    "Field": {
        "name": "Field",
        "description": "",
        "methods": {
            "createCustomField": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "searcherKey",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Create custom field",
                "name": "createCustomField",
                "details": "Creates a custom field using a definition (object encapsulating custom field data)",
                "verb": "POST",
                "url": "rest/api/2/field",
                "path": "/",
                "responseType": "object"
            },
            "getFields": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get fields",
                "name": "getFields",
                "details": "Returns a list of all fields, both System and Custom",
                "verb": "GET",
                "url": "rest/api/2/field",
                "path": "/",
                "responseType": "array"
            }
        }
    },
    "Filter": {
        "name": "Filter",
        "description": "Resource for searches.",
        "methods": {
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "owner",
                        "type": "Object"
                    },
                    {
                        "name": "jql",
                        "type": "string"
                    },
                    {
                        "name": "viewUrl",
                        "type": "string"
                    },
                    {
                        "name": "searchUrl",
                        "type": "string"
                    },
                    {
                        "name": "favourite",
                        "type": "boolean"
                    },
                    {
                        "name": "sharePermissions",
                        "type": "array"
                    },
                    {
                        "name": "sharedUsers",
                        "type": "object"
                    },
                    {
                        "name": "subscriptions",
                        "type": "object"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand"
                    }
                ],
                "description": "Create filter",
                "name": "create",
                "details": "Creates a new filter, and returns newly created filter.\n Currently sets permissions just using the users default sharing permissionsthe parameters to expand",
                "verb": "POST",
                "url": "rest/api/2/filter",
                "path": "/",
                "responseType": "object"
            },
            "editFilter": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "owner",
                        "type": "Object"
                    },
                    {
                        "name": "jql",
                        "type": "string"
                    },
                    {
                        "name": "viewUrl",
                        "type": "string"
                    },
                    {
                        "name": "searchUrl",
                        "type": "string"
                    },
                    {
                        "name": "favourite",
                        "type": "boolean"
                    },
                    {
                        "name": "sharePermissions",
                        "type": "array"
                    },
                    {
                        "name": "sharedUsers",
                        "type": "object"
                    },
                    {
                        "name": "subscriptions",
                        "type": "object"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand"
                    }
                ],
                "description": "Edit filter",
                "name": "editFilter",
                "details": "Updates an existing filter, and returns its new value.the parameters to expand",
                "verb": "PUT",
                "url": "rest/api/2/filter/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "deleteById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete filter",
                "name": "deleteById",
                "details": "Delete a filter.",
                "verb": "DELETE",
                "url": "rest/api/2/filter/:id",
                "path": "/:id",
                "responseType": null
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand"
                    }
                ],
                "description": "Get filter",
                "name": "findById",
                "details": "Returns a filter given an idthe parameters to expand",
                "verb": "GET",
                "url": "rest/api/2/filter/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "defaultColumns": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Default columns",
                "name": "defaultColumns",
                "details": "Returns the default columns for the given filter. Currently logged in user will be used as\n the user making such request.",
                "verb": "GET",
                "url": "rest/api/2/filter/:id/columns",
                "path": "/:id/columns",
                "responseType": "object"
            },
            "setColumns": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Set columns",
                "name": "setColumns",
                "details": "Sets the default columns for the given filter.",
                "verb": "PUT",
                "url": "rest/api/2/filter/:id/columns",
                "path": "/:id/columns",
                "responseType": null
            },
            "resetColumns": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Reset columns",
                "name": "resetColumns",
                "details": "Resets the columns for the given filter such that the filter no longer has its own column config.",
                "verb": "DELETE",
                "url": "rest/api/2/filter/:id/columns",
                "path": "/:id/columns",
                "responseType": null
            },
            "getSharePermissions": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get share permissions",
                "name": "getSharePermissions",
                "details": "Returns all share permissions of the given filter.",
                "verb": "GET",
                "url": "rest/api/2/filter/:id/permission",
                "path": "/:id/permission",
                "responseType": "array"
            },
            "addSharePermission": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "type": "string"
                    },
                    {
                        "name": "groupname",
                        "type": "string"
                    },
                    {
                        "name": "projectRoleId",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Add share permission",
                "name": "addSharePermission",
                "details": "Adds a share permissions to the given filter. Adding a global permission removes all previous permissions from the filter.",
                "verb": "POST",
                "url": "rest/api/2/filter/:id/permission",
                "path": "/:id/permission",
                "responseType": "array"
            },
            "getSharePermission": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "permissionId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get share permission",
                "name": "getSharePermission",
                "details": "Returns a single share permission of the given filter.",
                "verb": "GET",
                "url": "rest/api/2/filter/:id/permission/:permissionId",
                "path": "/:id/permission/:permissionId",
                "responseType": "object"
            },
            "deleteSharePermission": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "permission-id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete share permission",
                "name": "deleteSharePermission",
                "details": "Removes a share permissions from the given filter.",
                "verb": "DELETE",
                "url": "rest/api/2/filter/:id/permission/:permission-id",
                "path": "/:id/permission/:permission-id",
                "responseType": null
            },
            "getDefaultShareScope": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get default share scope",
                "name": "getDefaultShareScope",
                "details": "Returns the default share scope of the logged-in user.",
                "verb": "GET",
                "url": "rest/api/2/filter/defaultShareScope",
                "path": "/defaultShareScope",
                "responseType": "object"
            },
            "setDefaultShareScope": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "scope",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Set default share scope",
                "name": "setDefaultShareScope",
                "details": "Sets the default share scope of the logged-in user. Available values are GLOBAL and PRIVATE.",
                "verb": "PUT",
                "url": "rest/api/2/filter/defaultShareScope",
                "path": "/defaultShareScope",
                "responseType": "object"
            },
            "getFavouriteFilters": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand"
                    }
                ],
                "description": "Get favourite filters",
                "name": "getFavouriteFilters",
                "details": "Returns the favourite filters of the logged-in user.the parameters to expand",
                "verb": "GET",
                "url": "rest/api/2/filter/favourite",
                "path": "/favourite",
                "responseType": "array"
            }
        }
    },
    "Group": {
        "name": "Group",
        "description": "",
        "methods": {
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Create group",
                "name": "create",
                "details": "Creates a group by given group parameter\n \n Returns REST representation for the requested group.",
                "verb": "POST",
                "url": "rest/api/2/group",
                "path": "/",
                "responseType": "object"
            },
            "findById": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "groupname",
                        "type": "string",
                        "description": "A name of requested group."
                    },
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "List of fields to expand. Currently only available expand is \"users\"."
                    }
                ],
                "description": "Get group",
                "name": "findById",
                "details": "Returns REST representation for the requested group. Allows to get list of active users belonging to the\n specified group and its subgroups if \"users\" expand option is provided. You can page through users list by using\n indexes in expand param. For example to get users from index 10 to index 15 use \"users[10:15]\" expand value. This\n will return 6 users (if there are at least 16 users in this group). Indexes are 0-based and inclusive.\n \n This resource is deprecated, please use group/member API instead.A name of requested group.List of fields to expand. Currently only available expand is \"users\".",
                "verb": "GET",
                "url": "rest/api/2/group",
                "path": "/",
                "responseType": null
            },
            "deleteById": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "groupname",
                        "type": "string",
                        "description": "(mandatory) The name of the group to delete."
                    },
                    {
                        "name": "swapGroup",
                        "type": "string",
                        "description": "If you delete a group and content is restricted to that group, the content will be hidden from all users. \n To prevent this, use this parameter to specify a different group to transfer the restrictions (comments and worklogs only) to."
                    }
                ],
                "description": "Remove group",
                "name": "deleteById",
                "details": "Deletes a group by given group parameter.\n \n Returns no content(mandatory) The name of the group to delete.If you delete a group and content is restricted to that group, the content will be hidden from all users. \n To prevent this, use this parameter to specify a different group to transfer the restrictions (comments and worklogs only) to.",
                "verb": "DELETE",
                "url": "rest/api/2/group",
                "path": "/",
                "responseType": null
            },
            "getUsersFromGroup": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "groupname",
                        "type": "string",
                        "description": "a name of the group for which members will be returned."
                    },
                    {
                        "name": "includeInactiveUsers",
                        "type": "boolean",
                        "description": "Default: falseinactive users will be included in the response if set to true."
                    },
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "Default: 0the index of the first user in group to return (0 based)."
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "Default: 50the maximum number of users to return (max 50)."
                    }
                ],
                "description": "Get users from group",
                "name": "getUsersFromGroup",
                "details": "This resource returns a paginated list of users who are members of the specified group and its subgroups.\n Users in the page are ordered by user names. User of this resource is required to have sysadmin or admin permissions.a name of the group for which members will be returned.Default: falseinactive users will be included in the response if set to true.Default: 0the index of the first user in group to return (0 based).Default: 50the maximum number of users to return (max 50).",
                "verb": "GET",
                "url": "rest/api/2/group/member",
                "path": "/member",
                "responseType": "object"
            },
            "addUserToGroup": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "queryParams": [
                    {
                        "name": "groupname",
                        "type": "string",
                        "description": "A name of requested group."
                    }
                ],
                "description": "Add user to group",
                "name": "addUserToGroup",
                "details": "Adds given user to a group.\n \n Returns the current state of the group.A name of requested group.",
                "verb": "POST",
                "url": "rest/api/2/group/user",
                "path": "/user",
                "responseType": "object"
            },
            "removeUserFromGroup": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "groupname",
                        "type": "string",
                        "description": "A name of requested group."
                    },
                    {
                        "name": "username",
                        "type": "string",
                        "description": "User to remove from a group"
                    }
                ],
                "description": "Remove user from group",
                "name": "removeUserFromGroup",
                "details": "Removes given user from a group.\n \n Returns no contentA name of requested group.User to remove from a group",
                "verb": "DELETE",
                "url": "rest/api/2/group/user",
                "path": "/user",
                "responseType": null
            }
        }
    },
    "Groups": {
        "name": "Groups",
        "description": "REST endpoint for searching groups in a group picker",
        "methods": {
            "find": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "query",
                        "type": "string",
                        "description": "a String to match groups agains"
                    },
                    {
                        "name": "exclude",
                        "type": "string",
                        "description": ""
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": ""
                    },
                    {
                        "name": "userName",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Find groups",
                "name": "find",
                "details": "Returns groups with substrings matching a given query. This is mainly for use with\n the group picker, so the returned groups contain html to be used as picker suggestions.\n The groups are also wrapped in a single response object that also contains a header for\n use in the picker, specifically Showing X of Y matching groups.\n \n The number of groups returned is limited by the system property \"jira.ajax.autocomplete.limit\"\n \n The groups will be unique and sorted.a String to match groups agains",
                "verb": "GET",
                "url": "rest/api/2/groups/picker",
                "path": "/picker",
                "responseType": "object"
            }
        }
    },
    "Groupuserpicker": {
        "name": "Groupuserpicker",
        "description": "",
        "methods": {
            "findUsersAndGroups": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "query",
                        "type": "string",
                        "description": "A string used to search username, Name or e-mail address"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of users to return (defaults to 50). The maximum allowed value is 1000. If\n                    you specify a value that is higher than this number, your search results will be truncated."
                    },
                    {
                        "name": "showAvatar",
                        "type": "boolean",
                        "description": ""
                    },
                    {
                        "name": "fieldId",
                        "type": "string",
                        "description": "The custom field id, if this request comes from a custom field, such as a user picker. Optional."
                    },
                    {
                        "name": "projectId",
                        "type": "string",
                        "description": "The list of project ids to further restrict the search\n                    This parameter can occur multiple times to pass in multiple project ids.\n                    Comma separated value is not supported.\n                    This parameter is only used when fieldId is present."
                    },
                    {
                        "name": "issueTypeId",
                        "type": "string",
                        "description": "The list of issue type ids to further restrict the search.\n                    This parameter can occur multiple times to pass in multiple issue type ids.\n                    Comma separated value is not supported.\n                    Special values such as -1 (all standard issue types), -2 (all subtask issue types) are supported.\n                    This parameter is only used when fieldId is present."
                    }
                ],
                "description": "Find users and groups",
                "name": "findUsersAndGroups",
                "details": "Returns a list of users and groups matching query with highlighting. This resource cannot be accessed\n anonymously.A string used to search username, Name or e-mail addressthe maximum number of users to return (defaults to 50). The maximum allowed value is 1000. If\n                    you specify a value that is higher than this number, your search results will be truncated.The custom field id, if this request comes from a custom field, such as a user picker. Optional.The list of project ids to further restrict the search\n                    This parameter can occur multiple times to pass in multiple project ids.\n                    Comma separated value is not supported.\n                    This parameter is only used when fieldId is present.The list of issue type ids to further restrict the search.\n                    This parameter can occur multiple times to pass in multiple issue type ids.\n                    Comma separated value is not supported.\n                    Special values such as -1 (all standard issue types), -2 (all subtask issue types) are supported.\n                    This parameter is only used when fieldId is present.",
                "verb": "GET",
                "url": "rest/api/2/groupuserpicker",
                "path": "/",
                "responseType": "object"
            }
        }
    },
    "Issue": {
        "name": "Issue",
        "description": "",
        "methods": {
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "transition",
                        "type": "object"
                    },
                    {
                        "name": "fields",
                        "type": "object"
                    },
                    {
                        "name": "update",
                        "type": "object"
                    },
                    {
                        "name": "historyMetadata",
                        "type": "object"
                    },
                    {
                        "name": "properties",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Create issue",
                "name": "create",
                "details": "Creates an issue or a sub-task from a JSON representation.\n \n The fields that can be set on create, in either the fields parameter or the update parameter can be determined\n using the /rest/api/2/issue/createmeta resource.\n If a field is not configured to appear on the create screen, then it will not be in the createmeta, and a field\n validation error will occur if it is submitted.\n \n Creating a sub-task is similar to creating a regular issue, with two important differences:\n \n the issueType field must correspond to a sub-task issue type (you can use\n /issue/createmeta to discover sub-task issue types), and\n you must provide a parent field in the issue create request containing the id or key of the\n parent issue.\n ",
                "verb": "POST",
                "url": "rest/api/2/issue",
                "path": "/",
                "responseType": "object"
            },
            "createIssues": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "issueUpdates",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Create issues",
                "name": "createIssues",
                "details": "Creates issues or sub-tasks from a JSON representation.\n \n Creates many issues in one bulk operation.\n \n Creating a sub-task is similar to creating a regular issue. More details can be found in createIssue section:\n {@link IssueResource#createIssue(IssueUpdateBean)}}",
                "verb": "POST",
                "url": "rest/api/2/issue/bulk",
                "path": "/bulk",
                "responseType": "object"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "fields",
                        "type": "string",
                        "description": "the list of fields to return for the issue. By default, all fields are returned."
                    },
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    },
                    {
                        "name": "properties",
                        "type": "string",
                        "description": "the list of properties to return for the issue. By default no properties are returned."
                    }
                ],
                "description": "Get issue",
                "name": "findById",
                "details": "Returns a full representation of the issue for the given issue key.\n \n An issue JSON consists of the issue key, a collection of fields,\n a link to the workflow transition sub-resource, and (optionally) the HTML rendered values of any fields that support it\n (e.g. if wiki syntax is enabled for the description or comments).\n \n The fields param (which can be specified multiple times) gives a comma-separated list of fields\n to include in the response. This can be used to retrieve a subset of fields.\n A particular field can be excluded by prefixing it with a minus.\n \n By default, all (*all) fields are returned in this get-issue resource. Note: the default is different\n when doing a jql search -- the default there is just navigable fields (*navigable).\n \n *all - include all fields\n *navigable - include just navigable fields\n summary,comment - include just the summary and comments\n -comment - include everything except comments (the default is *all for get-issue)\n *all,-comment - include everything except comments\n \n \n The {@code properties} param is similar to {@code fields} and specifies a comma-separated list of issue\n properties to include. Unlike {@code fields}, properties are not included by default. To include them all\n send {@code ?properties=*all}. You can also include only specified properties or exclude some properties\n with a minus (-) sign.\n \n \n {@code *all} - include all properties\n {@code *all, -prop1} - include all properties except {@code prop1} \n {@code prop1, prop1} - include {@code prop1} and {@code prop2} properties \n \n \n JIRA will attempt to identify the issue by the issueIdOrKey path parameter. This can be an issue id,\n or an issue key. If the issue cannot be found via an exact match, JIRA will also look for the issue in a case-insensitive way, or\n by looking to see if the issue was moved. In either of these cases, the request will proceed as normal (a 302 or other redirect\n will not be returned). The issue key contained in the response will indicate the current value of issue's key.\n \n The expand param is used to include, hidden by default, parts of response. This can be used to include:\n \n renderedFields - field values in HTML format\n names - display name of each field\n schema - schema for each field which describes a type of the field\n transitions - all possible transitions for the given issue\n operations - all possibles operations which may be applied on issue\n editmeta - information about how each field may be edited. It contains field's schema as well.\n changelog - history of all changes of the given issue\n versionedRepresentations -\n REST representations of all fields. Some field may contain more recent versions. RESET representations are numbered.\n The greatest number always represents the most recent version. It is recommended that the most recent version is used.\n version for these fields which provide a more recent REST representation.\n After including versionedRepresentations \"fields\" field become hidden.\n the list of fields to return for the issue. By default, all fields are returned.the list of properties to return for the issue. By default no properties are returned.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey",
                "path": "/:issueIdOrKey",
                "responseType": "object"
            },
            "deleteById": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "deleteSubtasks",
                        "type": "string",
                        "description": "a String of true or false indicating that any subtasks should also be deleted.  If the\n                       issue has no subtasks this parameter is ignored.  If the issue has subtasks and this parameter is missing or false,\n                       then the issue will not be deleted and an error will be returned."
                    }
                ],
                "description": "Delete issue",
                "name": "deleteById",
                "details": "Delete an issue.\n \n If the issue has subtasks you must set the parameter deleteSubtasks=true to delete the issue.\n You cannot delete an issue without its subtasks also being deleted.a String of true or false indicating that any subtasks should also be deleted.  If the\n                       issue has no subtasks this parameter is ignored.  If the issue has subtasks and this parameter is missing or false,\n                       then the issue will not be deleted and an error will be returned.",
                "verb": "DELETE",
                "url": "rest/api/2/issue/:issueIdOrKey",
                "path": "/:issueIdOrKey",
                "responseType": null
            },
            "editIssue": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "transition",
                        "type": "object"
                    },
                    {
                        "name": "fields",
                        "type": "object"
                    },
                    {
                        "name": "update",
                        "type": "object"
                    },
                    {
                        "name": "historyMetadata",
                        "type": "object"
                    },
                    {
                        "name": "properties",
                        "type": "array"
                    }
                ],
                "queryParams": [
                    {
                        "name": "notifyUsers",
                        "type": "boolean",
                        "description": "Default: truesend the email with notification that the issue was updated to users that watch it.\n                    Admin or project admin permissions are required to disable the notification."
                    }
                ],
                "description": "Edit issue",
                "name": "editIssue",
                "details": "Edits an issue from a JSON representation.\n \n The issue can either be updated by setting explicit the field value(s)\n or by using an operation to change the field value.\n \n The fields that can be updated, in either the fields parameter or the update parameter, can be determined\n using the /rest/api/2/issue/{issueIdOrKey}/editmeta resource.\n If a field is not configured to appear on the edit screen, then it will not be in the editmeta, and a field\n validation error will occur if it is submitted.\n \n Specifying a \"field_id\": field_value in the \"fields\" is a shorthand for a \"set\" operation in the \"update\" section.\n Field should appear either in \"fields\" or \"update\", not in both.Default: truesend the email with notification that the issue was updated to users that watch it.\n                    Admin or project admin permissions are required to disable the notification.",
                "verb": "PUT",
                "url": "rest/api/2/issue/:issueIdOrKey",
                "path": "/:issueIdOrKey",
                "responseType": null
            },
            "assign": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "emailAddress",
                        "type": "string"
                    },
                    {
                        "name": "avatarUrls",
                        "type": "object"
                    },
                    {
                        "name": "displayName",
                        "type": "string"
                    },
                    {
                        "name": "active",
                        "type": "boolean"
                    },
                    {
                        "name": "timeZone",
                        "type": "string"
                    },
                    {
                        "name": "locale",
                        "type": "string"
                    },
                    {
                        "name": "groups",
                        "type": "Object"
                    },
                    {
                        "name": "applicationRoles",
                        "type": "Object"
                    }
                ],
                "queryParams": [],
                "description": "Assign",
                "name": "assign",
                "details": "Assigns an issue to a user.\n You can use this resource to assign issues when the user submitting the request has the assign permission but not the\n edit issue permission.\n If the name is \"-1\" automatic assignee is used.  A null name will remove the assignee.",
                "verb": "PUT",
                "url": "rest/api/2/issue/:issueIdOrKey/assignee",
                "path": "/:issueIdOrKey/assignee",
                "responseType": null
            },
            "getComments": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the page offset, if not specified then defaults to 0"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "how many results on the page should be included. Defaults to 50."
                    },
                    {
                        "name": "orderBy",
                        "type": "string",
                        "description": "ordering of the results."
                    },
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "optional flags: renderedBody (provides body rendered in HTML)"
                    }
                ],
                "description": "Get comments",
                "name": "getComments",
                "details": "Returns all comments for an issue.\n \n Results can be ordered by the \"created\" field which means the date a comment was added.\n the page offset, if not specified then defaults to 0how many results on the page should be included. Defaults to 50.ordering of the results.optional flags: renderedBody (provides body rendered in HTML)",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/comment",
                "path": "/:issueIdOrKey/comment",
                "responseType": "object"
            },
            "addComment": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "author",
                        "type": "Object"
                    },
                    {
                        "name": "body",
                        "type": "string"
                    },
                    {
                        "name": "renderedBody",
                        "type": "string"
                    },
                    {
                        "name": "updateAuthor",
                        "type": "Object"
                    },
                    {
                        "name": "created",
                        "type": "string"
                    },
                    {
                        "name": "updated",
                        "type": "string"
                    },
                    {
                        "name": "visibility",
                        "type": "object"
                    },
                    {
                        "name": "properties",
                        "type": "array"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "optional flags: renderedBody (provides body rendered in HTML)"
                    }
                ],
                "description": "Add comment",
                "name": "addComment",
                "details": "Adds a new comment to an issue.optional flags: renderedBody (provides body rendered in HTML)",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/comment",
                "path": "/:issueIdOrKey/comment",
                "responseType": "object"
            },
            "updateComment": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "author",
                        "type": "Object"
                    },
                    {
                        "name": "body",
                        "type": "string"
                    },
                    {
                        "name": "renderedBody",
                        "type": "string"
                    },
                    {
                        "name": "updateAuthor",
                        "type": "Object"
                    },
                    {
                        "name": "created",
                        "type": "string"
                    },
                    {
                        "name": "updated",
                        "type": "string"
                    },
                    {
                        "name": "visibility",
                        "type": "object"
                    },
                    {
                        "name": "properties",
                        "type": "array"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "optional flags: renderedBody (provides body rendered in HTML)"
                    }
                ],
                "description": "Update comment",
                "name": "updateComment",
                "details": "Updates an existing comment using its JSON representation.optional flags: renderedBody (provides body rendered in HTML)",
                "verb": "PUT",
                "url": "rest/api/2/issue/:issueIdOrKey/comment/:id",
                "path": "/:issueIdOrKey/comment/:id",
                "responseType": "object"
            },
            "deleteComment": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete comment",
                "name": "deleteComment",
                "details": "Deletes an existing comment .",
                "verb": "DELETE",
                "url": "rest/api/2/issue/:issueIdOrKey/comment/:id",
                "path": "/:issueIdOrKey/comment/:id",
                "responseType": null
            },
            "getComment": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "optional flags: renderedBody (provides body rendered in HTML)"
                    }
                ],
                "description": "Get comment",
                "name": "getComment",
                "details": "Returns a single comment.optional flags: renderedBody (provides body rendered in HTML)",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/comment/:id",
                "path": "/:issueIdOrKey/comment/:id",
                "responseType": "object"
            },
            "getEditIssueMeta": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get edit issue meta",
                "name": "getEditIssueMeta",
                "details": "Returns the meta data for editing an issue.\n \n The fields in the editmeta correspond to the fields in the edit screen for the issue.\n Fields not in the screen will not be in the editmeta.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/editmeta",
                "path": "/:issueIdOrKey/editmeta",
                "responseType": "object"
            },
            "notify": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "subject",
                        "type": "string"
                    },
                    {
                        "name": "textBody",
                        "type": "string"
                    },
                    {
                        "name": "htmlBody",
                        "type": "string"
                    },
                    {
                        "name": "to",
                        "type": "object"
                    },
                    {
                        "name": "restrict",
                        "type": "object"
                    }
                ],
                "queryParams": [],
                "description": "Notify",
                "name": "notify",
                "details": "Sends a notification (email) to the list or recipients defined in the request.",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/notify",
                "path": "/:issueIdOrKey/notify",
                "responseType": null
            },
            "getRemoteIssueLinks": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "globalId",
                        "type": "string",
                        "description": "The id of the remote issue link to be returned.  If null (not provided) all remote links for the\n                     issue are returned.\n                     For a fullexplanation of Issue Link fields please refer to\n                     https://developer.atlassian.com/display/JIRADEV/Fields+in+Remote+Issue+Links"
                    }
                ],
                "description": "Get remote issue links",
                "name": "getRemoteIssueLinks",
                "details": "A REST sub-resource representing the remote issue links on the issue.The id of the remote issue link to be returned.  If null (not provided) all remote links for the\n                     issue are returned.\n                     For a fullexplanation of Issue Link fields please refer to\n                     https://developer.atlassian.com/display/JIRADEV/Fields+in+Remote+Issue+Links",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/remotelink",
                "path": "/:issueIdOrKey/remotelink",
                "responseType": "array"
            },
            "createOrUpdateRemoteIssueLink": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "globalId",
                        "type": "string"
                    },
                    {
                        "name": "application",
                        "type": "object"
                    },
                    {
                        "name": "relationship",
                        "type": "string"
                    },
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "queryParams": [],
                "description": "Create or update remote issue link",
                "name": "createOrUpdateRemoteIssueLink",
                "details": "Creates or updates a remote issue link from a JSON representation. If a globalId is provided and a remote issue link\n exists with that globalId, the remote issue link is updated. Otherwise, the remote issue link is created.",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/remotelink",
                "path": "/:issueIdOrKey/remotelink",
                "responseType": "object"
            },
            "deleteRemoteIssueLinkByGlobalId": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "globalId",
                        "type": "string",
                        "description": "the global id of the remote issue link"
                    }
                ],
                "description": "Delete remote issue link by global id",
                "name": "deleteRemoteIssueLinkByGlobalId",
                "details": "Delete the remote issue link with the given global id on the issue.the global id of the remote issue link",
                "verb": "DELETE",
                "url": "rest/api/2/issue/:issueIdOrKey/remotelink",
                "path": "/:issueIdOrKey/remotelink",
                "responseType": null
            },
            "getRemoteIssueLinkById": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "linkId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get remote issue link by id",
                "name": "getRemoteIssueLinkById",
                "details": "Get the remote issue link with the given id on the issue.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/remotelink/:linkId",
                "path": "/:issueIdOrKey/remotelink/:linkId",
                "responseType": "object"
            },
            "updateRemoteIssueLink": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "linkId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "globalId",
                        "type": "string"
                    },
                    {
                        "name": "application",
                        "type": "object"
                    },
                    {
                        "name": "relationship",
                        "type": "string"
                    },
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "queryParams": [],
                "description": "Update remote issue link",
                "name": "updateRemoteIssueLink",
                "details": "Updates a remote issue link from a JSON representation. Any fields not provided are set to null.",
                "verb": "PUT",
                "url": "rest/api/2/issue/:issueIdOrKey/remotelink/:linkId",
                "path": "/:issueIdOrKey/remotelink/:linkId",
                "responseType": "object"
            },
            "deleteRemoteIssueLinkById": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "linkId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete remote issue link by id",
                "name": "deleteRemoteIssueLinkById",
                "details": "Delete the remote issue link with the given id on the issue.",
                "verb": "DELETE",
                "url": "rest/api/2/issue/:issueIdOrKey/remotelink/:linkId",
                "path": "/:issueIdOrKey/remotelink/:linkId",
                "responseType": null
            },
            "getTransitions": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "transitionId",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get transitions",
                "name": "getTransitions",
                "details": "Get a list of the transitions possible for this issue by the current user, along with fields that are required and their types.\n \n Fields will only be returned if expand=transitions.fields.\n \n The fields in the metadata correspond to the fields in the transition screen for that transition.\n Fields not in the screen will not be in the metadata.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/transitions",
                "path": "/:issueIdOrKey/transitions",
                "responseType": "object"
            },
            "doTransition": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "transition",
                        "type": "object"
                    },
                    {
                        "name": "fields",
                        "type": "object"
                    },
                    {
                        "name": "update",
                        "type": "object"
                    },
                    {
                        "name": "historyMetadata",
                        "type": "object"
                    },
                    {
                        "name": "properties",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Do transition",
                "name": "doTransition",
                "details": "Perform a transition on an issue.\n When performing the transition you can update or set other issue fields.\n \n The fields that can be set on transtion, in either the fields parameter or the update parameter can be determined\n using the /rest/api/2/issue/{issueIdOrKey}/transitions?expand=transitions.fields resource.\n If a field is not configured to appear on the transition screen, then it will not be in the transition metadata, and a field\n validation error will occur if it is submitted.",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/transitions",
                "path": "/:issueIdOrKey/transitions",
                "responseType": null
            },
            "removeVote": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Remove vote",
                "name": "removeVote",
                "details": "Remove your vote from an issue. (i.e. \"unvote\")",
                "verb": "DELETE",
                "url": "rest/api/2/issue/:issueIdOrKey/votes",
                "path": "/:issueIdOrKey/votes",
                "responseType": null
            },
            "addVote": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Add vote",
                "name": "addVote",
                "details": "Cast your vote in favour of an issue.",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/votes",
                "path": "/:issueIdOrKey/votes",
                "responseType": null
            },
            "getVotes": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get votes",
                "name": "getVotes",
                "details": "A REST sub-resource representing the voters on the issue.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/votes",
                "path": "/:issueIdOrKey/votes",
                "responseType": "object"
            },
            "getIssueWatchers": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get issue watchers",
                "name": "getIssueWatchers",
                "details": "Returns the list of watchers for the issue with the given key.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/watchers",
                "path": "/:issueIdOrKey/watchers",
                "responseType": "object"
            },
            "addWatcher": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Add watcher",
                "name": "addWatcher",
                "details": "Adds a user to an issue's watcher list.",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/watchers",
                "path": "/:issueIdOrKey/watchers",
                "responseType": null
            },
            "removeWatcher": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "a String containing the name of the user to remove from the watcher list. Must not be null."
                    }
                ],
                "description": "Remove watcher",
                "name": "removeWatcher",
                "details": "Removes a user from an issue's watcher list.a String containing the name of the user to remove from the watcher list. Must not be null.",
                "verb": "DELETE",
                "url": "rest/api/2/issue/:issueIdOrKey/watchers",
                "path": "/:issueIdOrKey/watchers",
                "responseType": null
            },
            "getIssueWorklog": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get issue worklog",
                "name": "getIssueWorklog",
                "details": "Returns all work logs for an issue. \n Note: Work logs won't be returned if the Log work field is hidden for the project.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/worklog",
                "path": "/:issueIdOrKey/worklog",
                "responseType": "object"
            },
            "addWorklog": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "author",
                        "type": "Object"
                    },
                    {
                        "name": "updateAuthor",
                        "type": "Object"
                    },
                    {
                        "name": "comment",
                        "type": "string"
                    },
                    {
                        "name": "created",
                        "type": "string"
                    },
                    {
                        "name": "updated",
                        "type": "string"
                    },
                    {
                        "name": "visibility",
                        "type": "object"
                    },
                    {
                        "name": "started",
                        "type": "string"
                    },
                    {
                        "name": "timeSpent",
                        "type": "string"
                    },
                    {
                        "name": "timeSpentSeconds",
                        "type": "integer"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "issueId",
                        "type": "string"
                    }
                ],
                "queryParams": [
                    {
                        "name": "adjustEstimate",
                        "type": "string",
                        "description": "(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are\n                       \n                       \"new\" - sets the estimate to a specific value\n                       \"leave\"- leaves the estimate as is\n                       \"manual\" - specify a specific amount to increase remaining estimate by\n                       \"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog "
                    },
                    {
                        "name": "newEstimate",
                        "type": "string",
                        "description": "(required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field. e.g. \"2d\""
                    },
                    {
                        "name": "reduceBy",
                        "type": "string",
                        "description": "(required when \"manual\" is selected for adjustEstimate) the amount to reduce the remaining estimate by e.g. \"2d\""
                    }
                ],
                "description": "Add worklog",
                "name": "addWorklog",
                "details": "Adds a new worklog entry to an issue.(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are\n                       \n                       \"new\" - sets the estimate to a specific value\n                       \"leave\"- leaves the estimate as is\n                       \"manual\" - specify a specific amount to increase remaining estimate by\n                       \"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog (required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field. e.g. \"2d\"(required when \"manual\" is selected for adjustEstimate) the amount to reduce the remaining estimate by e.g. \"2d\"",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/worklog",
                "path": "/:issueIdOrKey/worklog",
                "responseType": "object"
            },
            "getWorklog": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get worklog",
                "name": "getWorklog",
                "details": "Returns a specific worklog. \n Note: The work log won't be returned if the Log work field is hidden for the project.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/worklog/:id",
                "path": "/:issueIdOrKey/worklog/:id",
                "responseType": "object"
            },
            "updateWorklog": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "author",
                        "type": "Object"
                    },
                    {
                        "name": "updateAuthor",
                        "type": "Object"
                    },
                    {
                        "name": "comment",
                        "type": "string"
                    },
                    {
                        "name": "created",
                        "type": "string"
                    },
                    {
                        "name": "updated",
                        "type": "string"
                    },
                    {
                        "name": "visibility",
                        "type": "object"
                    },
                    {
                        "name": "started",
                        "type": "string"
                    },
                    {
                        "name": "timeSpent",
                        "type": "string"
                    },
                    {
                        "name": "timeSpentSeconds",
                        "type": "integer"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "issueId",
                        "type": "string"
                    }
                ],
                "queryParams": [
                    {
                        "name": "adjustEstimate",
                        "type": "string",
                        "description": "(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are\n                       \n                       \"new\" - sets the estimate to a specific value\n                       \"leave\"- leaves the estimate as is\n                       \"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog "
                    },
                    {
                        "name": "newEstimate",
                        "type": "string",
                        "description": "(required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field."
                    }
                ],
                "description": "Update worklog",
                "name": "updateWorklog",
                "details": "Updates an existing worklog entry.\n Note that:(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are\n                       \n                       \"new\" - sets the estimate to a specific value\n                       \"leave\"- leaves the estimate as is\n                       \"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog (required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field.",
                "verb": "PUT",
                "url": "rest/api/2/issue/:issueIdOrKey/worklog/:id",
                "path": "/:issueIdOrKey/worklog/:id",
                "responseType": "object"
            },
            "deleteWorklog": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "adjustEstimate",
                        "type": "string",
                        "description": "(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are\n                       \n                       \"new\" - sets the estimate to a specific value\n                       \"leave\"- leaves the estimate as is\n                       \"manual\" - specify a specific amount to increase remaining estimate by\n                       \"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog "
                    },
                    {
                        "name": "newEstimate",
                        "type": "string",
                        "description": "(required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field. e.g. \"2d\""
                    },
                    {
                        "name": "increaseBy",
                        "type": "string",
                        "description": "(required when \"manual\" is selected for adjustEstimate) the amount to increase the remaining estimate by e.g. \"2d\""
                    }
                ],
                "description": "Delete worklog",
                "name": "deleteWorklog",
                "details": "Deletes an existing worklog entry.(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are\n                       \n                       \"new\" - sets the estimate to a specific value\n                       \"leave\"- leaves the estimate as is\n                       \"manual\" - specify a specific amount to increase remaining estimate by\n                       \"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog (required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field. e.g. \"2d\"(required when \"manual\" is selected for adjustEstimate) the amount to increase the remaining estimate by e.g. \"2d\"",
                "verb": "DELETE",
                "url": "rest/api/2/issue/:issueIdOrKey/worklog/:id",
                "path": "/:issueIdOrKey/worklog/:id",
                "responseType": null
            },
            "getCreateIssueMeta": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "projectIds",
                        "type": "string",
                        "description": "combined with the projectKeys param, lists the projects with which to filter the results. If absent, all projects are returned.\n                       This parameter can be specified multiple times, and/or be a comma-separated list.\n                       Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results."
                    },
                    {
                        "name": "projectKeys",
                        "type": "string",
                        "description": "combined with the projectIds param, lists the projects with which to filter the results. If null, all projects are returned.\n                       This parameter can be specified multiple times, and/or be a comma-separated list.\n                       Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results."
                    },
                    {
                        "name": "issuetypeIds",
                        "type": "string",
                        "description": "combinded with issuetypeNames, lists the issue types with which to filter the results. If null, all issue types are returned.\n                       This parameter can be specified multiple times, and/or be a comma-separated list.\n                       Specifiying an issue type that does not exist is not an error."
                    },
                    {
                        "name": "issuetypeNames",
                        "type": "string",
                        "description": "combinded with issuetypeIds, lists the issue types with which to filter the results. If null, all issue types are returned.\n                       This parameter can be specified multiple times, but is NOT interpreted as a comma-separated list.\n                       Specifiying an issue type that does not exist is not an error."
                    }
                ],
                "description": "Get create issue meta",
                "name": "getCreateIssueMeta",
                "details": "Returns the meta data for creating issues. This includes the available projects, issue types and fields,\n including field types and whether or not those fields are required.\n Projects will not be returned if the user does not have permission to create issues in that project.\n \n The fields in the createmeta correspond to the fields in the create screen for the project/issuetype.\n Fields not in the screen will not be in the createmeta.\n \n Fields will only be returned if expand=projects.issuetypes.fields.\n \n The results can be filtered by project and/or issue type, given by the query params.combined with the projectKeys param, lists the projects with which to filter the results. If absent, all projects are returned.\n                       This parameter can be specified multiple times, and/or be a comma-separated list.\n                       Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results.combined with the projectIds param, lists the projects with which to filter the results. If null, all projects are returned.\n                       This parameter can be specified multiple times, and/or be a comma-separated list.\n                       Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results.combinded with issuetypeNames, lists the issue types with which to filter the results. If null, all issue types are returned.\n                       This parameter can be specified multiple times, and/or be a comma-separated list.\n                       Specifiying an issue type that does not exist is not an error.combinded with issuetypeIds, lists the issue types with which to filter the results. If null, all issue types are returned.\n                       This parameter can be specified multiple times, but is NOT interpreted as a comma-separated list.\n                       Specifiying an issue type that does not exist is not an error.",
                "verb": "GET",
                "url": "rest/api/2/issue/createmeta",
                "path": "/createmeta",
                "responseType": "object"
            },
            "getIssuePickerResource": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "query",
                        "type": "string",
                        "description": "the query."
                    },
                    {
                        "name": "currentJQL",
                        "type": "string",
                        "description": "the JQL in context of which the request is executed. Only issues which match this JQL query will be included in results."
                    },
                    {
                        "name": "currentIssueKey",
                        "type": "string",
                        "description": "the key of the issue in context of which the request is executed. The issue which is in context will not be included in the auto-completion result, even if it matches the query."
                    },
                    {
                        "name": "currentProjectId",
                        "type": "string",
                        "description": "the id of the project in context of which the request is executed. Suggested issues will be only from this project."
                    },
                    {
                        "name": "showSubTasks",
                        "type": "boolean",
                        "description": "if set to false, subtasks will not be included in the list."
                    },
                    {
                        "name": "showSubTaskParent",
                        "type": "boolean",
                        "description": "if set to false and request is executed in context of a subtask, the parent issue will not be included in the auto-completion result, even if it matches the query."
                    }
                ],
                "description": "Get issue picker resource",
                "name": "getIssuePickerResource",
                "details": "Returns suggested issues which match the auto-completion query for the user which executes this request. This REST\n method will check the user's history and the user's browsing context and select this issues, which match the query.the query.the JQL in context of which the request is executed. Only issues which match this JQL query will be included in results.the key of the issue in context of which the request is executed. The issue which is in context will not be included in the auto-completion result, even if it matches the query.the id of the project in context of which the request is executed. Suggested issues will be only from this project.if set to false, subtasks will not be included in the list.if set to false and request is executed in context of a subtask, the parent issue will not be included in the auto-completion result, even if it matches the query.",
                "verb": "GET",
                "url": "rest/api/2/issue/picker",
                "path": "/picker",
                "responseType": "object"
            }
        }
    },
    "IssueAttachments": {
        "name": "IssueAttachments",
        "description": "Issue attachments",
        "methods": {
            "addAttachment": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Add attachment",
                "name": "addAttachment",
                "details": "Add one or more attachments to an issue.\n \n This resource expects a multipart post. The media-type multipart/form-data is defined in RFC 1867. Most client\n libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components\n library provides a\n MultiPartEntity\n that makes it simple to submit a multipart POST.\n \n In order to protect against XSRF attacks, because this method accepts multipart/form-data, it has XSRF protection\n on it.  This means you must submit a header of X-Atlassian-Token: no-check with the request, otherwise it will be\n blocked.\n \n The name of the multipart/form-data parameter that contains attachments must be \"file\"\n \n A simple example to upload a file called \"myfile.txt\" to issue REST-123:\n curl -D- -u admin:admin -X POST -H \"X-Atlassian-Token: no-check\" -F \"file=@myfile.txt\" http://myhost/rest/api/2/issue/TEST-123/attachments",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/attachments",
                "path": "/:issueIdOrKey/attachments",
                "responseType": "array"
            }
        }
    },
    "IssueProperties": {
        "name": "IssueProperties",
        "description": "",
        "methods": {
            "getPropertiesKeys": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get properties keys",
                "name": "getPropertiesKeys",
                "details": "Returns the keys of all properties for the issue identified by the key or by the id.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/properties",
                "path": "/:issueIdOrKey/properties",
                "responseType": "object"
            },
            "deleteProperty": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete property",
                "name": "deleteProperty",
                "details": "Removes the property from the issue identified by the key or by the id. Ths user removing the property is required\n to have permissions to edit the issue.",
                "verb": "DELETE",
                "url": "rest/api/2/issue/:issueIdOrKey/properties/:propertyKey",
                "path": "/:issueIdOrKey/properties/:propertyKey",
                "responseType": null
            },
            "setProperty": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Set property",
                "name": "setProperty",
                "details": "Sets the value of the specified issue's property.\n \n You can use this resource to store a custom data against the issue identified by the key or by the id. The user\n who stores the data is required to have permissions to edit the issue.\n ",
                "verb": "PUT",
                "url": "rest/api/2/issue/:issueIdOrKey/properties/:propertyKey",
                "path": "/:issueIdOrKey/properties/:propertyKey",
                "responseType": null
            },
            "getProperty": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get property",
                "name": "getProperty",
                "details": "Returns the value of the property with a given key from the issue identified by the key or by the id. The user who retrieves\n the property is required to have permissions to read the issue.",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/properties/:propertyKey",
                "path": "/:issueIdOrKey/properties/:propertyKey",
                "responseType": "object"
            }
        }
    },
    "IssueSubtask": {
        "name": "IssueSubtask",
        "description": "",
        "methods": {
            "getSubTasks": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get sub tasks",
                "name": "getSubTasks",
                "details": "Returns an issue's subtask list",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/subtask",
                "path": "/:issueIdOrKey/subtask",
                "responseType": "object"
            },
            "canMoveSubTask": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Can move sub task",
                "name": "canMoveSubTask",
                "details": "",
                "verb": "GET",
                "url": "rest/api/2/issue/:issueIdOrKey/subtask/move",
                "path": "/:issueIdOrKey/subtask/move",
                "responseType": null
            },
            "moveSubTasks": {
                "urlParams": [
                    {
                        "name": "issueIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "current",
                        "type": "integer"
                    },
                    {
                        "name": "original",
                        "type": "integer"
                    }
                ],
                "queryParams": [],
                "description": "Move sub tasks",
                "name": "moveSubTasks",
                "details": "Reorders an issue's subtasks by moving the subtask at index \"from\"\n to index \"to\".",
                "verb": "POST",
                "url": "rest/api/2/issue/:issueIdOrKey/subtask/move",
                "path": "/:issueIdOrKey/subtask/move",
                "responseType": null
            }
        }
    },
    "IssueLink": {
        "name": "IssueLink",
        "description": "The Link Issue Resource provides functionality to manage issue links.",
        "methods": {
            "linkIssues": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "type",
                        "type": "object"
                    },
                    {
                        "name": "inwardIssue",
                        "type": "Object"
                    },
                    {
                        "name": "outwardIssue",
                        "type": "Object"
                    },
                    {
                        "name": "comment",
                        "type": "object"
                    }
                ],
                "queryParams": [],
                "description": "Link issues",
                "name": "linkIssues",
                "details": "Creates an issue link between two issues.\n The user requires the link issue permission for the issue which will be linked to another issue.\n The specified link type in the request is used to create the link and will create a link from the first issue\n to the second issue using the outward description. It also create a link from the second issue to the first issue using the\n inward description of the issue link type.\n It will add the supplied comment to the first issue. The comment can have a restriction who can view it.\n If group is specified, only users of this group can view this comment, if roleLevel is specified only users who have the specified role can view this comment.\n The user who creates the issue link needs to belong to the specified group or have the specified role.",
                "verb": "POST",
                "url": "rest/api/2/issueLink",
                "path": "/",
                "responseType": null
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "linkId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get issue link",
                "name": "findById",
                "details": "Returns an issue link with the specified id.",
                "verb": "GET",
                "url": "rest/api/2/issueLink/:linkId",
                "path": "/:linkId",
                "responseType": "object"
            },
            "deleteById": {
                "urlParams": [
                    {
                        "name": "linkId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete issue link",
                "name": "deleteById",
                "details": "Deletes an issue link with the specified id.\n To be able to delete an issue link you must be able to view both issues and must have the link issue permission\n for at least one of the issues.",
                "verb": "DELETE",
                "url": "rest/api/2/issueLink/:linkId",
                "path": "/:linkId",
                "responseType": null
            }
        }
    },
    "IssueLinkType": {
        "name": "IssueLinkType",
        "description": "Rest resource to retrieve a list of issue link types.",
        "methods": {
            "getIssueLinkTypes": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get issue link types",
                "name": "getIssueLinkTypes",
                "details": "Returns a list of available issue link types, if issue linking is enabled.\n Each issue link type has an id, a name and a label for the outward and inward link relationship.",
                "verb": "GET",
                "url": "rest/api/2/issueLinkType",
                "path": "/",
                "responseType": "object"
            },
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "inward",
                        "type": "string"
                    },
                    {
                        "name": "outward",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Create issue link type",
                "name": "create",
                "details": "Create a new issue link type.",
                "verb": "POST",
                "url": "rest/api/2/issueLinkType",
                "path": "/",
                "responseType": "object"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "issueLinkTypeId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get issue link type",
                "name": "findById",
                "details": "Returns for a given issue link type id all information about this issue link type.",
                "verb": "GET",
                "url": "rest/api/2/issueLinkType/:issueLinkTypeId",
                "path": "/:issueLinkTypeId",
                "responseType": "object"
            },
            "deleteById": {
                "urlParams": [
                    {
                        "name": "issueLinkTypeId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete issue link type",
                "name": "deleteById",
                "details": "Delete the specified issue link type.",
                "verb": "DELETE",
                "url": "rest/api/2/issueLinkType/:issueLinkTypeId",
                "path": "/:issueLinkTypeId",
                "responseType": null
            },
            "update": {
                "urlParams": [
                    {
                        "name": "issueLinkTypeId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "inward",
                        "type": "string"
                    },
                    {
                        "name": "outward",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Update issue link type",
                "name": "update",
                "details": "Update the specified issue link type.",
                "verb": "PUT",
                "url": "rest/api/2/issueLinkType/:issueLinkTypeId",
                "path": "/:issueLinkTypeId",
                "responseType": "object"
            }
        }
    },
    "Issuesecurityschemes": {
        "name": "Issuesecurityschemes",
        "description": "REST resource that allows to view security schemes defined in the product.",
        "methods": {
            "getIssueSecuritySchemes": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get issue security schemes",
                "name": "getIssueSecuritySchemes",
                "details": "Returns all issue security schemes that are defined.",
                "verb": "GET",
                "url": "rest/api/2/issuesecurityschemes",
                "path": "/",
                "responseType": "object"
            },
            "getIssueSecurityScheme": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get issue security scheme",
                "name": "getIssueSecurityScheme",
                "details": "Returns the issue security scheme along with that are defined.",
                "verb": "GET",
                "url": "rest/api/2/issuesecurityschemes/:id",
                "path": "/:id",
                "responseType": "object"
            }
        }
    },
    "Issuetype": {
        "name": "Issuetype",
        "description": "",
        "methods": {
            "getIssueAllTypes": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get issue all types",
                "name": "getIssueAllTypes",
                "details": "Returns a list of all issue types visible to the user",
                "verb": "GET",
                "url": "rest/api/2/issuetype",
                "path": "/",
                "responseType": "array"
            },
            "createIssueType": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Create issue type",
                "name": "createIssueType",
                "details": "Creates an issue type from a JSON representation and adds the issue newly created issue type to the default issue\n type scheme.",
                "verb": "POST",
                "url": "rest/api/2/issuetype",
                "path": "/",
                "responseType": "object"
            },
            "updateIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "avatarId",
                        "type": "integer"
                    }
                ],
                "queryParams": [],
                "description": "Update issue type",
                "name": "updateIssueType",
                "details": "Updates the specified issue type from a JSON representation.",
                "verb": "PUT",
                "url": "rest/api/2/issuetype/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "getIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get issue type",
                "name": "getIssueType",
                "details": "Returns a full representation of the issue type that has the given id.",
                "verb": "GET",
                "url": "rest/api/2/issuetype/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "deleteIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "alternativeIssueTypeId",
                        "type": "string",
                        "description": "the id of an issue type to which issues associated with the removed issue type will be migrated."
                    }
                ],
                "description": "Delete issue type",
                "name": "deleteIssueType",
                "details": "Deletes the specified issue type. If the issue type has any associated issues, these issues will be migrated to\n the alternative issue type specified in the parameter. You can determine the alternative issue types by calling\n the /rest/api/2/issuetype/{id}/alternatives resource.the id of an issue type to which issues associated with the removed issue type will be migrated.",
                "verb": "DELETE",
                "url": "rest/api/2/issuetype/:id",
                "path": "/:id",
                "responseType": null
            },
            "getAlternativeIssueTypes": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get alternative issue types",
                "name": "getAlternativeIssueTypes",
                "details": "Returns a list of all alternative issue types for the given issue type id. The list will contain these issues types, to which\n issues assigned to the given issue type can be migrated. The suitable alternatives are issue types which are assigned\n to the same workflow, the same field configuration and the same screen scheme.",
                "verb": "GET",
                "url": "rest/api/2/issuetype/:id/alternatives",
                "path": "/:id/alternatives",
                "responseType": "array"
            },
            "createAvatarFromTemporary": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "cropperWidth",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetX",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetY",
                        "type": "integer"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "needsCropping",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Create avatar from temporary",
                "name": "createAvatarFromTemporary",
                "details": "Converts temporary avatar into a real avatar",
                "verb": "POST",
                "url": "rest/api/2/issuetype/:id/avatar",
                "path": "/:id/avatar",
                "responseType": "object"
            },
            "storeTemporaryAvatar": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": "name of file being uploaded"
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": "size of file"
                    }
                ],
                "description": "Store temporary avatar",
                "name": "storeTemporaryAvatar",
                "details": "Creates temporary avatar. Creating a temporary avatar is part of a 3-step process in uploading a new\n avatar for an issue type: upload, crop, confirm.\n \n The following examples shows these three steps using curl.\n The cookies (session) need to be preserved between requests, hence the use of -b and -c.\n The id created in step 2 needs to be passed to step 3\n (you can simply pass the whole response of step 2 as the request of step 3).\n \n \n curl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n   -H \"Content-Type: image/png\" --data-binary @mynewavatar.png \\\n   'http://localhost:8090/jira/rest/api/2/issuetype/1/avatar/temporary?filename=mynewavatar.png'\n\n curl -b cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n   -H \"Content-Type: application/json\" --data '{\"cropperWidth\": \"65\",\"cropperOffsetX\": \"10\",\"cropperOffsetY\": \"16\"}' \\\n   -o tmpid.json \\\n   http://localhost:8090/jira/rest/api/2/issuetype/1/avatar\n\n curl -b cookiejar.txt -X PUT -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n   -H \"Content-Type: application/json\" --data-binary @tmpid.json \\\n   http://localhost:8090/jira/rest/api/2/issuetype/1/avatar\n name of file being uploadedsize of file",
                "verb": "POST",
                "url": "rest/api/2/issuetype/:id/avatar/temporary",
                "path": "/:id/avatar/temporary",
                "responseType": "object"
            },
            "storeTemporaryAvatarUsingMultiPart": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Store temporary avatar using multi part",
                "name": "storeTemporaryAvatarUsingMultiPart",
                "details": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because\n the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from\n which the client parses the JSON from.\n \n Creating a temporary avatar is part of a 3-step process in uploading a new\n avatar for an issue type: upload, crop, confirm. This endpoint allows you to use a multipart upload\n instead of sending the image directly as the request body.\n \n You *must* use \"avatar\" as the name of the upload parameter:\n \n curl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n   -F \"avatar=@mynewavatar.png;type=image/png\" \\\n   'http://localhost:8090/jira/rest/api/2/issuetype/1/avatar/temporary'\n ",
                "verb": "POST",
                "url": "rest/api/2/issuetype/:id/avatar/temporary",
                "path": "/:id/avatar/temporary",
                "responseType": "object"
            }
        }
    },
    "IssuetypeProperties": {
        "name": "IssuetypeProperties",
        "description": "This resource allows to store custom properties for issue types.",
        "methods": {
            "getPropertyKeys": {
                "urlParams": [
                    {
                        "name": "issueTypeId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get property keys",
                "name": "getPropertyKeys",
                "details": "Returns the keys of all properties for the issue type identified by the id.",
                "verb": "GET",
                "url": "rest/api/2/issuetype/:issueTypeId/properties",
                "path": "/:issueTypeId/properties",
                "responseType": "object"
            },
            "deleteProperty": {
                "urlParams": [
                    {
                        "name": "issueTypeId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete property",
                "name": "deleteProperty",
                "details": "Removes the property from the issue type identified by the id. Ths user removing the property is required\n to have permissions to edit the issue type.",
                "verb": "DELETE",
                "url": "rest/api/2/issuetype/:issueTypeId/properties/:propertyKey",
                "path": "/:issueTypeId/properties/:propertyKey",
                "responseType": null
            },
            "setProperty": {
                "urlParams": [
                    {
                        "name": "issueTypeId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Set property",
                "name": "setProperty",
                "details": "Sets the value of the specified issue type's property.\n \n You can use this resource to store a custom data against an issue type identified by the id. The user\n who stores the data is required to have permissions to edit an issue type.\n ",
                "verb": "PUT",
                "url": "rest/api/2/issuetype/:issueTypeId/properties/:propertyKey",
                "path": "/:issueTypeId/properties/:propertyKey",
                "responseType": null
            },
            "getProperty": {
                "urlParams": [
                    {
                        "name": "issueTypeId",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get property",
                "name": "getProperty",
                "details": "Returns the value of the property with a given key from the issue type identified by the id. The user who retrieves\n the property is required to have permissions to view the issue type.",
                "verb": "GET",
                "url": "rest/api/2/issuetype/:issueTypeId/properties/:propertyKey",
                "path": "/:issueTypeId/properties/:propertyKey",
                "responseType": "object"
            }
        }
    },
    "JqlAutocompletedata": {
        "name": "JqlAutocompletedata",
        "description": "Resource for auto complete data for searches.",
        "methods": {
            "getAutoComplete": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get auto complete",
                "name": "getAutoComplete",
                "details": "Returns the auto complete data required for JQL searches.",
                "verb": "GET",
                "url": "rest/api/2/jql/autocompletedata",
                "path": "/autocompletedata",
                "responseType": "object"
            },
            "getFieldAutoCompleteForQueryString": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "fieldName",
                        "type": "string",
                        "description": "the field name for which the suggestions are generated."
                    },
                    {
                        "name": "fieldValue",
                        "type": "string",
                        "description": "the portion of the field value that has already been provided by the user."
                    },
                    {
                        "name": "predicateName",
                        "type": "string",
                        "description": "the predicate for which the suggestions are generated. Suggestions are generated only for: \"by\", \"from\" and \"to\"."
                    },
                    {
                        "name": "predicateValue",
                        "type": "string",
                        "description": "the portion of the predicate value that has already been provided by the user."
                    }
                ],
                "description": "Get field auto complete for query string",
                "name": "getFieldAutoCompleteForQueryString",
                "details": "Returns auto complete suggestions for JQL search.the field name for which the suggestions are generated.the portion of the field value that has already been provided by the user.the predicate for which the suggestions are generated. Suggestions are generated only for: \"by\", \"from\" and \"to\".the portion of the predicate value that has already been provided by the user.",
                "verb": "GET",
                "url": "rest/api/2/jql/autocompletedata/suggestions",
                "path": "/autocompletedata/suggestions",
                "responseType": "object"
            }
        }
    },
    "LicenseValidator": {
        "name": "LicenseValidator",
        "description": "",
        "methods": {
            "validate": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Validate",
                "name": "validate",
                "details": "",
                "verb": "POST",
                "url": "rest/api/2/licenseValidator",
                "path": "/",
                "responseType": null
            }
        }
    },
    "Mypreferences": {
        "name": "Mypreferences",
        "description": "Provide preferences of the currently logged in user.",
        "methods": {
            "getPreference": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "key",
                        "type": "string",
                        "description": "- key of the preference to be returned."
                    }
                ],
                "description": "Get preference",
                "name": "getPreference",
                "details": "Returns preference of the currently logged in user. Preference key must be provided as input parameter (key). The\n value is returned exactly as it is. If key parameter is not provided or wrong - status code 404. If value is\n found  - status code 200.- key of the preference to be returned.",
                "verb": "GET",
                "url": "rest/api/2/mypreferences",
                "path": "/",
                "responseType": null
            },
            "setPreference": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "key",
                        "type": "string",
                        "description": "- key of the preference to be set."
                    }
                ],
                "description": "Set preference",
                "name": "setPreference",
                "details": "Sets preference of the currently logged in user. Preference key must be provided as input parameters (key). Value\n must be provided as post body. If key or value parameter is not provided - status code 404. If preference is set\n - status code 204.- key of the preference to be set.",
                "verb": "PUT",
                "url": "rest/api/2/mypreferences",
                "path": "/",
                "responseType": null
            },
            "removePreference": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "key",
                        "type": "string",
                        "description": "- key of the preference to be removed."
                    }
                ],
                "description": "Remove preference",
                "name": "removePreference",
                "details": "Removes preference of the currently logged in user. Preference key must be provided as input parameters (key). If\n key parameter is not provided or wrong - status code 404. If preference is unset - status code 204.- key of the preference to be removed.",
                "verb": "DELETE",
                "url": "rest/api/2/mypreferences",
                "path": "/",
                "responseType": null
            }
        }
    },
    "Myself": {
        "name": "Myself",
        "description": "Currently logged user resource",
        "methods": {
            "updateUser": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    },
                    {
                        "name": "emailAddress",
                        "type": "string"
                    },
                    {
                        "name": "displayName",
                        "type": "string"
                    },
                    {
                        "name": "notification",
                        "type": "string"
                    },
                    {
                        "name": "applicationKeys",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Update user",
                "name": "updateUser",
                "details": "Modify currently logged user. The \"value\" fields present will override the existing value.\n Fields skipped in request will not be changed. Only email and display name can be change that way.\n Requires user password.",
                "verb": "PUT",
                "url": "rest/api/2/myself",
                "path": "/",
                "responseType": "object"
            },
            "getUser": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get user",
                "name": "getUser",
                "details": "Returns currently logged user. This resource cannot be accessed anonymously.",
                "verb": "GET",
                "url": "rest/api/2/myself",
                "path": "/",
                "responseType": "object"
            },
            "changeMyPassword": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "password",
                        "type": "string"
                    },
                    {
                        "name": "currentPassword",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Change my password",
                "name": "changeMyPassword",
                "details": "Modify caller password.",
                "verb": "PUT",
                "url": "rest/api/2/myself/password",
                "path": "/password",
                "responseType": null
            }
        }
    },
    "Notificationscheme": {
        "name": "Notificationscheme",
        "description": "",
        "methods": {
            "getNotificationSchemes": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the index of the first notification scheme to return (0 based)."
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of notification schemes to return (max 50)."
                    },
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get notification schemes",
                "name": "getNotificationSchemes",
                "details": "Returns a paginated list of notification schemes. In order to access notification scheme, the calling user is\n required to have permissions to administer at least one project associated with the requested notification scheme. Each scheme contains\n a list of events and recipient configured to receive notifications for these events. Consumer should allow events without recipients to appear in response.\n The list is ordered by the scheme's name.\n Follow the documentation of /notificationscheme/{id} resource for all details about returned value.the index of the first notification scheme to return (0 based).the maximum number of notification schemes to return (max 50).",
                "verb": "GET",
                "url": "rest/api/2/notificationscheme",
                "path": "/",
                "responseType": "object"
            },
            "getNotificationScheme": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get notification scheme",
                "name": "getNotificationScheme",
                "details": "Returns a full representation of the notification scheme for the given id. This resource will return a\n notification scheme containing a list of events and recipient configured to receive notifications for these events. Consumer\n should allow events without recipients to appear in response. User accessing\n the data is required to have permissions to administer at least one project associated with the requested notification scheme.\n \n Notification recipients can be:\n \n current assignee - the value of the notificationType is CurrentAssignee\n issue reporter - the value of the notificationType is Reporter\n current user - the value of the notificationType is CurrentUser\n project lead - the value of the notificationType is ProjectLead\n component lead - the value of the notificationType is ComponentLead\n all watchers - the value of the notification type is AllWatchers\n configured user - the value of the notification type is User. Parameter will contain key of the user. Information about the user will be provided\n if user expand parameter is used. \n configured group - the value of the notification type is Group. Parameter will contain name of the group. Information about the group will be provided\n if group expand parameter is used. \n configured email address - the value of the notification type is EmailAddress, additionally information about the email will be provided.\n users or users in groups in the configured custom fields - the value of the notification type is UserCustomField or GroupCustomField. Parameter\n will contain id of the custom field. Information about the field will be provided if field expand parameter is used. \n configured project role - the value of the notification type is ProjectRole. Parameter will contain project role id. Information about the project role\n will be provided if projectRole expand parameter is used. \n \n Please see the example for reference.\n ",
                "verb": "GET",
                "url": "rest/api/2/notificationscheme/:id",
                "path": "/:id",
                "responseType": "object"
            }
        }
    },
    "Password": {
        "name": "Password",
        "description": "REST resource for operations related to passwords and the password policy.",
        "methods": {
            "getPasswordPolicy": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "hasOldPassword",
                        "type": "boolean",
                        "description": "Default: falsewhether or not the user will be required to enter their current password.  Use\n                       {@code false} (the default) if this is a new user or if an administrator is forcibly changing\n                       another user's password."
                    }
                ],
                "description": "Get password policy",
                "name": "getPasswordPolicy",
                "details": "Returns the list of requirements for the current password policy. For example, \"The password must have at least 10 characters.\",\n \"The password must not be similar to the user's name or email address.\", etc.Default: falsewhether or not the user will be required to enter their current password.  Use\n                       {@code false} (the default) if this is a new user or if an administrator is forcibly changing\n                       another user's password.",
                "verb": "GET",
                "url": "rest/api/2/password/policy",
                "path": "/policy",
                "responseType": "object"
            },
            "policyCheckCreateUser": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "username",
                        "type": "string"
                    },
                    {
                        "name": "displayName",
                        "type": "string"
                    },
                    {
                        "name": "emailAddress",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Policy check create user",
                "name": "policyCheckCreateUser",
                "details": "Returns a list of statements explaining why the password policy would disallow a proposed password for a new user.\n \n You can use this method to test the password policy validation. This could be done prior to an action \n where a new user and related password are created, using methods like the ones in \n UserService.      \n For example, you could use this to validate a password in a create user form in the user interface, as the user enters it.\n The username and new password must be not empty to perform the validation.\n Note, this method will help you validate against the policy only. It won't check any other validations that might be performed \n when creating a new user, e.g. checking whether a user with the same name already exists.\n ",
                "verb": "POST",
                "url": "rest/api/2/password/policy/createUser",
                "path": "/policy/createUser",
                "responseType": "object"
            },
            "policyCheckUpdateUser": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "username",
                        "type": "string"
                    },
                    {
                        "name": "oldPassword",
                        "type": "string"
                    },
                    {
                        "name": "newPassword",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Policy check update user",
                "name": "policyCheckUpdateUser",
                "details": "Returns a list of statements explaining why the password policy would disallow a proposed new password for a user with an existing password.\n \n You can use this method to test the password policy validation. This could be done prior to an action where the password \n is actually updated, using methods like ChangePassword      \n or ResetPassword. \n For example, you could use this to validate a password in a change password form in the user interface, as the user enters it.\n The user must exist and the username and new password must be not empty, to perform the validation.\n Note, this method will help you validate against the policy only. It won't check any other validations that might be performed \n when submitting a password change/reset request, e.g. verifying whether the old password is valid.\n ",
                "verb": "POST",
                "url": "rest/api/2/password/policy/updateUser",
                "path": "/policy/updateUser",
                "responseType": "object"
            }
        }
    },
    "Permissionscheme": {
        "name": "Permissionscheme",
        "description": "",
        "methods": {
            "getPermissionSchemes": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get permission schemes",
                "name": "getPermissionSchemes",
                "details": "Returns a list of all permission schemes.\n \n By default only shortened beans are returned. If you want to include permissions of all the schemes,\n then specify the permissions expand parameter. Permissions will be included also if you specify\n any other expand parameter.\n ",
                "verb": "GET",
                "url": "rest/api/2/permissionscheme",
                "path": "/",
                "responseType": "object"
            },
            "createPermissionScheme": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "permissions",
                        "type": "array"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Create permission scheme",
                "name": "createPermissionScheme",
                "details": "Create a new permission scheme.\n This method can create schemes with a defined permission set, or without.",
                "verb": "POST",
                "url": "rest/api/2/permissionscheme",
                "path": "/",
                "responseType": "object"
            },
            "getPermissionScheme": {
                "urlParams": [
                    {
                        "name": "schemeId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get permission scheme",
                "name": "getPermissionScheme",
                "details": "Returns a permission scheme identified by the given id.",
                "verb": "GET",
                "url": "rest/api/2/permissionscheme/:schemeId",
                "path": "/:schemeId",
                "responseType": "object"
            },
            "deletePermissionScheme": {
                "urlParams": [
                    {
                        "name": "schemeId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete permission scheme",
                "name": "deletePermissionScheme",
                "details": "Deletes a permission scheme identified by the given id.",
                "verb": "DELETE",
                "url": "rest/api/2/permissionscheme/:schemeId",
                "path": "/:schemeId",
                "responseType": null
            },
            "updatePermissionScheme": {
                "urlParams": [
                    {
                        "name": "schemeId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "permissions",
                        "type": "array"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Update permission scheme",
                "name": "updatePermissionScheme",
                "details": "Updates a permission scheme.\n \n If the permissions list is present then it will be set in the permission scheme, which basically means it will overwrite any permission grants that\n existed in the permission scheme. Sending an empty list will remove all permission grants from the permission scheme.\n \n To update just the name and description, do not send permissions list at all.\n \n To add or remove a single permission grant instead of updating the whole list at once use the {schemeId}/permission/ resource.\n ",
                "verb": "PUT",
                "url": "rest/api/2/permissionscheme/:schemeId",
                "path": "/:schemeId",
                "responseType": "object"
            },
            "getPermissionSchemeGrants": {
                "urlParams": [
                    {
                        "name": "schemeId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get permission scheme grants",
                "name": "getPermissionSchemeGrants",
                "details": "Returns all permission grants of the given permission scheme.",
                "verb": "GET",
                "url": "rest/api/2/permissionscheme/:schemeId/permission",
                "path": "/:schemeId/permission",
                "responseType": "object"
            },
            "createPermissionGrant": {
                "urlParams": [
                    {
                        "name": "schemeId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "holder",
                        "type": "object"
                    },
                    {
                        "name": "permission",
                        "type": "string"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Create permission grant",
                "name": "createPermissionGrant",
                "details": "Creates a permission grant in a permission scheme.",
                "verb": "POST",
                "url": "rest/api/2/permissionscheme/:schemeId/permission",
                "path": "/:schemeId/permission",
                "responseType": "object"
            },
            "deletePermissionSchemeEntity": {
                "urlParams": [
                    {
                        "name": "schemeId",
                        "type": "string"
                    },
                    {
                        "name": "permissionId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete permission scheme entity",
                "name": "deletePermissionSchemeEntity",
                "details": "Deletes a permission grant from a permission scheme.",
                "verb": "DELETE",
                "url": "rest/api/2/permissionscheme/:schemeId/permission/:permissionId",
                "path": "/:schemeId/permission/:permissionId",
                "responseType": null
            },
            "getPermissionSchemeGrant": {
                "urlParams": [
                    {
                        "name": "schemeId",
                        "type": "string"
                    },
                    {
                        "name": "permissionId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get permission scheme grant",
                "name": "getPermissionSchemeGrant",
                "details": "Returns a permission grant identified by the given id.",
                "verb": "GET",
                "url": "rest/api/2/permissionscheme/:schemeId/permission/:permissionId",
                "path": "/:schemeId/permission/:permissionId",
                "responseType": "object"
            }
        }
    },
    "Priority": {
        "name": "Priority",
        "description": "",
        "methods": {
            "getPriorities": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get priorities",
                "name": "getPriorities",
                "details": "Returns a list of all issue priorities.",
                "verb": "GET",
                "url": "rest/api/2/priority",
                "path": "/",
                "responseType": "array"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get priority",
                "name": "findById",
                "details": "Returns an issue priority.",
                "verb": "GET",
                "url": "rest/api/2/priority/:id",
                "path": "/:id",
                "responseType": "object"
            }
        }
    },
    "Project": {
        "name": "Project",
        "description": "",
        "methods": {
            "find": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand"
                    },
                    {
                        "name": "recent",
                        "type": "number",
                        "description": "if this parameter is set then only projects recently accessed by the current user (if not logged in then based on HTTP session) will be returned (maximum count limited to the specified number but no more than 20)."
                    }
                ],
                "description": "Get all projects",
                "name": "find",
                "details": "Returns all projects which are visible for the currently logged in user. If no user is logged in, it returns the\n list of projects that are visible when using anonymous access.the parameters to expandif this parameter is set then only projects recently accessed by the current user (if not logged in then based on HTTP session) will be returned (maximum count limited to the specified number but no more than 20).",
                "verb": "GET",
                "url": "rest/api/2/project",
                "path": "/",
                "responseType": "array"
            },
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "projectTypeKey",
                        "type": "string"
                    },
                    {
                        "name": "projectTemplateKey",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "lead",
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "assigneeType",
                        "type": "string"
                    },
                    {
                        "name": "avatarId",
                        "type": "integer"
                    },
                    {
                        "name": "issueSecurityScheme",
                        "type": "integer"
                    },
                    {
                        "name": "permissionScheme",
                        "type": "integer"
                    },
                    {
                        "name": "notificationScheme",
                        "type": "integer"
                    },
                    {
                        "name": "categoryId",
                        "type": "integer"
                    }
                ],
                "queryParams": [],
                "description": "Create project",
                "name": "create",
                "details": "Creates a new project.",
                "verb": "POST",
                "url": "rest/api/2/project",
                "path": "/",
                "responseType": "object"
            },
            "update": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "projectTypeKey",
                        "type": "string"
                    },
                    {
                        "name": "projectTemplateKey",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "lead",
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "assigneeType",
                        "type": "string"
                    },
                    {
                        "name": "avatarId",
                        "type": "integer"
                    },
                    {
                        "name": "issueSecurityScheme",
                        "type": "integer"
                    },
                    {
                        "name": "permissionScheme",
                        "type": "integer"
                    },
                    {
                        "name": "notificationScheme",
                        "type": "integer"
                    },
                    {
                        "name": "categoryId",
                        "type": "integer"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand in returned project"
                    }
                ],
                "description": "Update project",
                "name": "update",
                "details": "Updates a project.\n \n Only non null values sent in JSON will be updated in the project.\n Values available for the assigneeType field are: \"PROJECT_LEAD\" and \"UNASSIGNED\".the parameters to expand in returned project",
                "verb": "PUT",
                "url": "rest/api/2/project/:projectIdOrKey",
                "path": "/:projectIdOrKey",
                "responseType": "object"
            },
            "deleteById": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete project",
                "name": "deleteById",
                "details": "Deletes a project.",
                "verb": "DELETE",
                "url": "rest/api/2/project/:projectIdOrKey",
                "path": "/:projectIdOrKey",
                "responseType": null
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand"
                    }
                ],
                "description": "Get project",
                "name": "findById",
                "details": "Contains a full representation of a project in JSON format.\n \n All project keys associated with the project will only be returned if expand=projectKeys.\n the parameters to expand",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey",
                "path": "/:projectIdOrKey",
                "responseType": "object"
            },
            "createAvatarFromTemporary": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "cropperWidth",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetX",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetY",
                        "type": "integer"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "needsCropping",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Create avatar from temporary",
                "name": "createAvatarFromTemporary",
                "details": "Converts temporary avatar into a real avatar",
                "verb": "POST",
                "url": "rest/api/2/project/:projectIdOrKey/avatar",
                "path": "/:projectIdOrKey/avatar",
                "responseType": "object"
            },
            "updateProjectAvatar": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "owner",
                        "type": "string"
                    },
                    {
                        "name": "isSystemAvatar",
                        "type": "boolean"
                    },
                    {
                        "name": "isSelected",
                        "type": "boolean"
                    },
                    {
                        "name": "isDeletable",
                        "type": "boolean"
                    },
                    {
                        "name": "urls",
                        "type": "object"
                    },
                    {
                        "name": "selected",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Update project avatar",
                "name": "updateProjectAvatar",
                "details": "",
                "verb": "PUT",
                "url": "rest/api/2/project/:projectIdOrKey/avatar",
                "path": "/:projectIdOrKey/avatar",
                "responseType": null
            },
            "deleteAvatar": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete avatar",
                "name": "deleteAvatar",
                "details": "Deletes avatar",
                "verb": "DELETE",
                "url": "rest/api/2/project/:projectIdOrKey/avatar/:id",
                "path": "/:projectIdOrKey/avatar/:id",
                "responseType": null
            },
            "storeTemporaryAvatar": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": "name of file being uploaded"
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": "size of file"
                    }
                ],
                "description": "Store temporary avatar",
                "name": "storeTemporaryAvatar",
                "details": "Creates temporary avatarname of file being uploadedsize of file",
                "verb": "POST",
                "url": "rest/api/2/project/:projectIdOrKey/avatar/temporary",
                "path": "/:projectIdOrKey/avatar/temporary",
                "responseType": "object"
            },
            "storeTemporaryAvatarUsingMultiPart": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Store temporary avatar using multi part",
                "name": "storeTemporaryAvatarUsingMultiPart",
                "details": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because\n the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from\n which the client parses the JSON.",
                "verb": "POST",
                "url": "rest/api/2/project/:projectIdOrKey/avatar/temporary",
                "path": "/:projectIdOrKey/avatar/temporary",
                "responseType": "object"
            },
            "getAllAvatars": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get all avatars",
                "name": "getAllAvatars",
                "details": "Returns all avatars which are visible for the currently logged in user.  The avatars are grouped into\n system and custom.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/avatars",
                "path": "/:projectIdOrKey/avatars",
                "responseType": "object"
            },
            "getProjectComponents": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get project components",
                "name": "getProjectComponents",
                "details": "Contains a full representation of a the specified project's components.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/components",
                "path": "/:projectIdOrKey/components",
                "responseType": "array"
            },
            "getAllStatuses": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get all statuses",
                "name": "getAllStatuses",
                "details": "Get all issue types with valid status values for a project",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/statuses",
                "path": "/:projectIdOrKey/statuses",
                "responseType": "array"
            },
            "updateProjectType": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "newProjectTypeKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Update project type",
                "name": "updateProjectType",
                "details": "Updates the type of a project.",
                "verb": "PUT",
                "url": "rest/api/2/project/:projectIdOrKey/type/:newProjectTypeKey",
                "path": "/:projectIdOrKey/type/:newProjectTypeKey",
                "responseType": "object"
            },
            "getProjectVersionsPaginated": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the page offset, if not specified then defaults to 0"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "how many results on the page should be included. Defaults to 50."
                    },
                    {
                        "name": "orderBy",
                        "type": "string",
                        "description": "ordering of the results."
                    },
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand"
                    }
                ],
                "description": "Get project versions paginated",
                "name": "getProjectVersionsPaginated",
                "details": "Returns all versions for the specified project. Results are paginated.\n \n Results can be ordered by the following fields:\n \n sequence\n name\n startDate\n releaseDate\n \n the page offset, if not specified then defaults to 0how many results on the page should be included. Defaults to 50.ordering of the results.the parameters to expand",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/version",
                "path": "/:projectIdOrKey/version",
                "responseType": "object"
            },
            "getProjectVersions": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "the parameters to expand"
                    }
                ],
                "description": "Get project versions",
                "name": "getProjectVersions",
                "details": "Contains a full representation of a the specified project's versions.the parameters to expand",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/versions",
                "path": "/:projectIdOrKey/versions",
                "responseType": "array"
            }
        }
    },
    "ProjectProperties": {
        "name": "ProjectProperties",
        "description": "",
        "methods": {
            "getPropertiesKeys": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get properties keys",
                "name": "getPropertiesKeys",
                "details": "Returns the keys of all properties for the project identified by the key or by the id.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/properties",
                "path": "/:projectIdOrKey/properties",
                "responseType": "object"
            },
            "deleteProperty": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete property",
                "name": "deleteProperty",
                "details": "Removes the property from the project identified by the key or by the id. Ths user removing the property is required\n to have permissions to administer the project.",
                "verb": "DELETE",
                "url": "rest/api/2/project/:projectIdOrKey/properties/:propertyKey",
                "path": "/:projectIdOrKey/properties/:propertyKey",
                "responseType": null
            },
            "setProperty": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Set property",
                "name": "setProperty",
                "details": "Sets the value of the specified project's property.\n \n You can use this resource to store a custom data against the project identified by the key or by the id. The user\n who stores the data is required to have permissions to administer the project.\n ",
                "verb": "PUT",
                "url": "rest/api/2/project/:projectIdOrKey/properties/:propertyKey",
                "path": "/:projectIdOrKey/properties/:propertyKey",
                "responseType": null
            },
            "getProperty": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get property",
                "name": "getProperty",
                "details": "Returns the value of the property with a given key from the project identified by the key or by the id. The user who retrieves\n the property is required to have permissions to read the project.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/properties/:propertyKey",
                "path": "/:projectIdOrKey/properties/:propertyKey",
                "responseType": "object"
            }
        }
    },
    "ProjectRole": {
        "name": "ProjectRole",
        "description": "",
        "methods": {
            "getProjectRoles": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get project roles",
                "name": "getProjectRoles",
                "details": "Returns all roles in the given project Id or key, with links to full details on each role.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/role",
                "path": "/:projectIdOrKey/role",
                "responseType": "object"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get project role",
                "name": "findById",
                "details": "Returns the details for a given project role in a project.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectIdOrKey/role/:id",
                "path": "/:projectIdOrKey/role/:id",
                "responseType": "object"
            },
            "setActors": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "integer"
                    },
                    {
                        "name": "categorisedActors",
                        "type": "object"
                    }
                ],
                "queryParams": [],
                "description": "Set actors",
                "name": "setActors",
                "details": "Updates a project role to include the specified actors (users or groups).",
                "verb": "PUT",
                "url": "rest/api/2/project/:projectIdOrKey/role/:id",
                "path": "/:projectIdOrKey/role/:id",
                "responseType": "object"
            },
            "addActorUsers": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Add actor users",
                "name": "addActorUsers",
                "details": "Adds an actor (user or group) to a project role.",
                "verb": "POST",
                "url": "rest/api/2/project/:projectIdOrKey/role/:id",
                "path": "/:projectIdOrKey/role/:id",
                "responseType": "object"
            },
            "deleteActor": {
                "urlParams": [
                    {
                        "name": "projectIdOrKey",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "user",
                        "type": "string",
                        "description": "the username to remove from the project role"
                    },
                    {
                        "name": "group",
                        "type": "string",
                        "description": "the groupname to remove from the project role"
                    }
                ],
                "description": "Delete actor",
                "name": "deleteActor",
                "details": "Deletes actors (users or groups) from a project role.\n \n \n Delete a user from the role: /rest/api/2/project/{projectIdOrKey}/role/{roleId}?user={username}\n Delete a group from the role: /rest/api/2/project/{projectIdOrKey}/role/{roleId}?group={groupname}\n the username to remove from the project rolethe groupname to remove from the project role",
                "verb": "DELETE",
                "url": "rest/api/2/project/:projectIdOrKey/role/:id",
                "path": "/:projectIdOrKey/role/:id",
                "responseType": null
            }
        }
    },
    "ProjectIssuesecuritylevelscheme": {
        "name": "ProjectIssuesecuritylevelscheme",
        "description": "Resource for associating permission schemes and projects.",
        "methods": {
            "getIssueSecurityScheme": {
                "urlParams": [
                    {
                        "name": "projectKeyOrId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get issue security scheme",
                "name": "getIssueSecurityScheme",
                "details": "Returns the issue security scheme for project.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectKeyOrId/issuesecuritylevelscheme",
                "path": "/:projectKeyOrId/issuesecuritylevelscheme",
                "responseType": "object"
            }
        }
    },
    "ProjectNotificationscheme": {
        "name": "ProjectNotificationscheme",
        "description": "Resource for associating notification schemes and projects.",
        "methods": {
            "getNotificationScheme": {
                "urlParams": [
                    {
                        "name": "projectKeyOrId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get notification scheme",
                "name": "getNotificationScheme",
                "details": "Gets a notification scheme associated with the project.\n Follow the documentation of /notificationscheme/{id} resource for all details about returned value.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectKeyOrId/notificationscheme",
                "path": "/:projectKeyOrId/notificationscheme",
                "responseType": "object"
            }
        }
    },
    "ProjectPermissionscheme": {
        "name": "ProjectPermissionscheme",
        "description": "Resource for associating permission schemes and projects.",
        "methods": {
            "assignPermissionScheme": {
                "urlParams": [
                    {
                        "name": "projectKeyOrId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "integer"
                    }
                ],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Assign permission scheme",
                "name": "assignPermissionScheme",
                "details": "Assigns a permission scheme with a project.",
                "verb": "PUT",
                "url": "rest/api/2/project/:projectKeyOrId/permissionscheme",
                "path": "/:projectKeyOrId/permissionscheme",
                "responseType": "object"
            },
            "getAssignedPermissionScheme": {
                "urlParams": [
                    {
                        "name": "projectKeyOrId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get assigned permission scheme",
                "name": "getAssignedPermissionScheme",
                "details": "Gets a permission scheme assigned with a project.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectKeyOrId/permissionscheme",
                "path": "/:projectKeyOrId/permissionscheme",
                "responseType": "object"
            }
        }
    },
    "ProjectSecuritylevel": {
        "name": "ProjectSecuritylevel",
        "description": "Provide security level information of the given project for the current user.",
        "methods": {
            "getSecurityLevelsForProject": {
                "urlParams": [
                    {
                        "name": "projectKeyOrId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get security levels for project",
                "name": "getSecurityLevelsForProject",
                "details": "Returns all security levels for the project that the current logged in user has access to.\n If the user does not have the Set Issue Security permission, the list will be empty.",
                "verb": "GET",
                "url": "rest/api/2/project/:projectKeyOrId/securitylevel",
                "path": "/:projectKeyOrId/securitylevel",
                "responseType": "object"
            }
        }
    },
    "ProjectType": {
        "name": "ProjectType",
        "description": "",
        "methods": {
            "find": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get all project types",
                "name": "find",
                "details": "Returns all the project types defined on the JIRA instance, not taking into account whether\n the license to use those project types is valid or not.",
                "verb": "GET",
                "url": "rest/api/2/project/type",
                "path": "/type",
                "responseType": "array"
            },
            "getProjectTypeByKey": {
                "urlParams": [
                    {
                        "name": "projectTypeKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get project type by key",
                "name": "getProjectTypeByKey",
                "details": "Returns the project type with the given key.",
                "verb": "GET",
                "url": "rest/api/2/project/type/:projectTypeKey",
                "path": "/type/:projectTypeKey",
                "responseType": "object"
            },
            "getAccessibleProjectTypeByKey": {
                "urlParams": [
                    {
                        "name": "projectTypeKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get accessible project type by key",
                "name": "getAccessibleProjectTypeByKey",
                "details": "Returns the project type with the given key, if it is accessible to the logged in user.\n This takes into account whether the user is licensed on the Application that defines the project type.",
                "verb": "GET",
                "url": "rest/api/2/project/type/:projectTypeKey/accessible",
                "path": "/type/:projectTypeKey/accessible",
                "responseType": "object"
            }
        }
    },
    "ProjectCategory": {
        "name": "ProjectCategory",
        "description": "",
        "methods": {
            "find": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get all project categories",
                "name": "find",
                "details": "Returns all project categories",
                "verb": "GET",
                "url": "rest/api/2/projectCategory",
                "path": "/",
                "responseType": "array"
            },
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Create project category",
                "name": "create",
                "details": "Create a project category via POST.",
                "verb": "POST",
                "url": "rest/api/2/projectCategory",
                "path": "/",
                "responseType": "object"
            },
            "getProjectCategoryById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get project category by id",
                "name": "getProjectCategoryById",
                "details": "Contains a representation of a project category in JSON format.",
                "verb": "GET",
                "url": "rest/api/2/projectCategory/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "deleteById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Remove project category",
                "name": "deleteById",
                "details": "Delete a project category.",
                "verb": "DELETE",
                "url": "rest/api/2/projectCategory/:id",
                "path": "/:id",
                "responseType": null
            },
            "update": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Update project category",
                "name": "update",
                "details": "Modify a project category via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field\n is not present, it is silently ignored.",
                "verb": "PUT",
                "url": "rest/api/2/projectCategory/:id",
                "path": "/:id",
                "responseType": "object"
            }
        }
    },
    "Projectvalidate": {
        "name": "Projectvalidate",
        "description": "",
        "methods": {
            "getProject": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "key",
                        "type": "string",
                        "description": "the project key"
                    }
                ],
                "description": "Get project",
                "name": "getProject",
                "details": "Validates a project key.the project key",
                "verb": "GET",
                "url": "rest/api/2/projectvalidate/key",
                "path": "/key",
                "responseType": "object"
            }
        }
    },
    "Reindex": {
        "name": "Reindex",
        "description": "REST resource for starting/stopping/querying indexing.",
        "methods": {
            "reindex": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Case insensitive String indicating type of reindex.  If omitted, then defaults to BACKGROUND_PREFERRED."
                    },
                    {
                        "name": "indexComments",
                        "type": "boolean",
                        "description": "Default: falseIndicates that comments should also be reindexed. Not relevant for foreground reindex, where comments are always reindexed."
                    },
                    {
                        "name": "indexChangeHistory",
                        "type": "boolean",
                        "description": "Default: falseIndicates that changeHistory should also be reindexed. Not relevant for foreground reindex, where changeHistory is always reindexed."
                    },
                    {
                        "name": "indexWorklogs",
                        "type": "boolean",
                        "description": "Default: falseIndicates that changeHistory should also be reindexed. Not relevant for foreground reindex, where changeHistory is always reindexed."
                    }
                ],
                "description": "Reindex",
                "name": "reindex",
                "details": "Kicks off a reindex.  Need Admin permissions to perform this reindex.Case insensitive String indicating type of reindex.  If omitted, then defaults to BACKGROUND_PREFERRED.Default: falseIndicates that comments should also be reindexed. Not relevant for foreground reindex, where comments are always reindexed.Default: falseIndicates that changeHistory should also be reindexed. Not relevant for foreground reindex, where changeHistory is always reindexed.Default: falseIndicates that changeHistory should also be reindexed. Not relevant for foreground reindex, where changeHistory is always reindexed.",
                "verb": "POST",
                "url": "rest/api/2/reindex",
                "path": "/",
                "responseType": "object"
            },
            "getReindexInfo": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "taskId",
                        "type": "number",
                        "description": "the id of an indexing task you wish to obtain details on.  If omitted, then defaults to the standard behaviour and\n               returns information on the active reindex task, or the last task to run if no reindex is taking place. .  If there is no\n               reindexing task with that id then a 404 is returned."
                    }
                ],
                "description": "Get reindex info",
                "name": "getReindexInfo",
                "details": "Returns information on the system reindexes.  If a reindex is currently taking place then information about this reindex is returned.\n If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404\n indicating that no reindex has taken place.the id of an indexing task you wish to obtain details on.  If omitted, then defaults to the standard behaviour and\n               returns information on the active reindex task, or the last task to run if no reindex is taking place. .  If there is no\n               reindexing task with that id then a 404 is returned.",
                "verb": "GET",
                "url": "rest/api/2/reindex",
                "path": "/",
                "responseType": "object"
            },
            "reindexIssues": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "issueId",
                        "type": "string",
                        "description": "the IDs or keys of one or more issues to reindex."
                    },
                    {
                        "name": "indexComments",
                        "type": "boolean",
                        "description": "Default: falseIndicates that comments should also be reindexed."
                    },
                    {
                        "name": "indexChangeHistory",
                        "type": "boolean",
                        "description": "Default: falseIndicates that changeHistory should also be reindexed."
                    },
                    {
                        "name": "indexWorklogs",
                        "type": "boolean",
                        "description": "Default: falseIndicates that changeHistory should also be reindexed."
                    }
                ],
                "description": "Reindex issues",
                "name": "reindexIssues",
                "details": "Reindexes one or more individual issues.  Indexing is performed synchronously - the call returns when indexing of\n the issues has completed or a failure occurs.\n \n Use either explicitly specified issue IDs or a JQL query to select issues to reindex.the IDs or keys of one or more issues to reindex.Default: falseIndicates that comments should also be reindexed.Default: falseIndicates that changeHistory should also be reindexed.Default: falseIndicates that changeHistory should also be reindexed.",
                "verb": "POST",
                "url": "rest/api/2/reindex/issue",
                "path": "/issue",
                "responseType": "object"
            },
            "getReindexProgress": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "taskId",
                        "type": "number",
                        "description": "the id of an indexing task you wish to obtain details on.  If omitted, then defaults to the standard behaviour and\n               returns information on the active reindex task, or the last task to run if no reindex is taking place. .  If there is no\n               reindexing task with that id then a 404 is returned."
                    }
                ],
                "description": "Get reindex progress",
                "name": "getReindexProgress",
                "details": "Returns information on the system reindexes.  If a reindex is currently taking place then information about this reindex is returned.\n If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404\n indicating that no reindex has taken place.the id of an indexing task you wish to obtain details on.  If omitted, then defaults to the standard behaviour and\n               returns information on the active reindex task, or the last task to run if no reindex is taking place. .  If there is no\n               reindexing task with that id then a 404 is returned.",
                "verb": "GET",
                "url": "rest/api/2/reindex/progress",
                "path": "/progress",
                "responseType": "object"
            }
        }
    },
    "ReindexRequest": {
        "name": "ReindexRequest",
        "description": "REST resource for querying and executing reindex requests.",
        "methods": {
            "processRequests": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Process requests",
                "name": "processRequests",
                "details": "Executes any pending reindex requests.  Returns a JSON array containing the IDs of the reindex requests\n that are being processed.  Execution is asynchronous - progress of the returned tasks can be monitored through\n other REST calls.",
                "verb": "POST",
                "url": "rest/api/2/reindex/request",
                "path": "/request",
                "responseType": "object"
            },
            "getProgress": {
                "urlParams": [
                    {
                        "name": "requestId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get progress",
                "name": "getProgress",
                "details": "Retrieves the progress of a single reindex request.",
                "verb": "GET",
                "url": "rest/api/2/reindex/request/:requestId",
                "path": "/request/:requestId",
                "responseType": "object"
            },
            "getProgressBulk": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "requestId",
                        "type": "string",
                        "description": "the reindex request IDs."
                    }
                ],
                "description": "Get progress bulk",
                "name": "getProgressBulk",
                "details": "Retrieves the progress of a multiple reindex requests.  Only reindex requests that actually exist will be returned\n in the results.the reindex request IDs.",
                "verb": "GET",
                "url": "rest/api/2/reindex/request/bulk",
                "path": "/request/bulk",
                "responseType": "object"
            }
        }
    },
    "Resolution": {
        "name": "Resolution",
        "description": "",
        "methods": {
            "getResolutions": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get resolutions",
                "name": "getResolutions",
                "details": "Returns a list of all resolutions.",
                "verb": "GET",
                "url": "rest/api/2/resolution",
                "path": "/",
                "responseType": "array"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get resolution",
                "name": "findById",
                "details": "Returns a resolution.",
                "verb": "GET",
                "url": "rest/api/2/resolution/:id",
                "path": "/:id",
                "responseType": "object"
            }
        }
    },
    "Role": {
        "name": "Role",
        "description": "",
        "methods": {
            "getProjectRoles": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get project roles",
                "name": "getProjectRoles",
                "details": "Get all the ProjectRoles available in JIRA. Currently this list is global.",
                "verb": "GET",
                "url": "rest/api/2/role",
                "path": "/",
                "responseType": "object"
            },
            "createProjectRole": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Create project role",
                "name": "createProjectRole",
                "details": "Creates a new ProjectRole to be available in JIRA.\n The created role does not have any default actors assigned.",
                "verb": "POST",
                "url": "rest/api/2/role",
                "path": "/",
                "responseType": "object"
            },
            "getProjectRolesById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get project roles by id",
                "name": "getProjectRolesById",
                "details": "Get a specific ProjectRole available in JIRA.",
                "verb": "GET",
                "url": "rest/api/2/role/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "partialUpdateProjectRole": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Partial update project role",
                "name": "partialUpdateProjectRole",
                "details": "Partially updates a roles name or description.",
                "verb": "POST",
                "url": "rest/api/2/role/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "fullyUpdateProjectRole": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Fully update project role",
                "name": "fullyUpdateProjectRole",
                "details": "Fully updates a roles. Both name and description must be given.",
                "verb": "PUT",
                "url": "rest/api/2/role/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "deleteProjectRole": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "swap",
                        "type": "number",
                        "description": "if given, removes a role even if it is used in scheme by replacing the role with the given one"
                    }
                ],
                "description": "Delete project role",
                "name": "deleteProjectRole",
                "details": "Deletes a role. May return 403 in the futureif given, removes a role even if it is used in scheme by replacing the role with the given one",
                "verb": "DELETE",
                "url": "rest/api/2/role/:id",
                "path": "/:id",
                "responseType": null
            },
            "getProjectRoleActorsForRole": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get project role actors for role",
                "name": "getProjectRoleActorsForRole",
                "details": "Gets default actors for the given role.",
                "verb": "GET",
                "url": "rest/api/2/role/:id/actors",
                "path": "/:id/actors",
                "responseType": "object"
            },
            "addProjectRoleActorsToRole": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "user",
                        "type": "array"
                    },
                    {
                        "name": "group",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Add project role actors to role",
                "name": "addProjectRoleActorsToRole",
                "details": "Adds default actors to the given role. The request data should contain a list of usernames or a list of groups to add.",
                "verb": "POST",
                "url": "rest/api/2/role/:id/actors",
                "path": "/:id/actors",
                "responseType": "object"
            },
            "deleteProjectRoleActorsFromRole": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "user",
                        "type": "string",
                        "description": "if given, removes an actor from given role"
                    },
                    {
                        "name": "group",
                        "type": "string",
                        "description": "if given, removes an actor from given role"
                    }
                ],
                "description": "Delete project role actors from role",
                "name": "deleteProjectRoleActorsFromRole",
                "details": "Removes default actor from the given role.if given, removes an actor from given roleif given, removes an actor from given role",
                "verb": "DELETE",
                "url": "rest/api/2/role/:id/actors",
                "path": "/:id/actors",
                "responseType": "object"
            }
        }
    },
    "Screens": {
        "name": "Screens",
        "description": "",
        "methods": {
            "getFieldsToAdd": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get fields to add",
                "name": "getFieldsToAdd",
                "details": "Gets available fields for screen. i.e ones that haven't already been added.",
                "verb": "GET",
                "url": "rest/api/2/screens/:screenId/availableFields",
                "path": "/:screenId/availableFields",
                "responseType": "object"
            },
            "getAllTabs": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "projectKey",
                        "type": "string",
                        "description": "the key of the project; this parameter is optional"
                    }
                ],
                "description": "Get all tabs",
                "name": "getAllTabs",
                "details": "Returns a list of all tabs for the given screenthe key of the project; this parameter is optional",
                "verb": "GET",
                "url": "rest/api/2/screens/:screenId/tabs",
                "path": "/:screenId/tabs",
                "responseType": "object"
            },
            "addTab": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Add tab",
                "name": "addTab",
                "details": "Creates tab for given screen",
                "verb": "POST",
                "url": "rest/api/2/screens/:screenId/tabs",
                "path": "/:screenId/tabs",
                "responseType": "object"
            },
            "renameTab": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    },
                    {
                        "name": "tabId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Rename tab",
                "name": "renameTab",
                "details": "Renames tab on given screen",
                "verb": "PUT",
                "url": "rest/api/2/screens/:screenId/tabs/:tabId",
                "path": "/:screenId/tabs/:tabId",
                "responseType": "object"
            },
            "deleteTab": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    },
                    {
                        "name": "tabId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete tab",
                "name": "deleteTab",
                "details": "Deletes tab to give screen",
                "verb": "DELETE",
                "url": "rest/api/2/screens/:screenId/tabs/:tabId",
                "path": "/:screenId/tabs/:tabId",
                "responseType": null
            },
            "addField": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    },
                    {
                        "name": "tabId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "fieldId",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Add field",
                "name": "addField",
                "details": "Adds field to the given tab.",
                "verb": "POST",
                "url": "rest/api/2/screens/:screenId/tabs/:tabId/fields",
                "path": "/:screenId/tabs/:tabId/fields",
                "responseType": "object"
            },
            "getAllFields": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    },
                    {
                        "name": "tabId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "projectKey",
                        "type": "string",
                        "description": "the key of the project; this parameter is optional"
                    }
                ],
                "description": "Get all fields",
                "name": "getAllFields",
                "details": "Gets all fields for a given tabthe key of the project; this parameter is optional",
                "verb": "GET",
                "url": "rest/api/2/screens/:screenId/tabs/:tabId/fields",
                "path": "/:screenId/tabs/:tabId/fields",
                "responseType": "object"
            },
            "removeField": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    },
                    {
                        "name": "tabId",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Remove field",
                "name": "removeField",
                "details": "Removes field from given tab",
                "verb": "DELETE",
                "url": "rest/api/2/screens/:screenId/tabs/:tabId/fields/:id",
                "path": "/:screenId/tabs/:tabId/fields/:id",
                "responseType": null
            },
            "moveField": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    },
                    {
                        "name": "tabId",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "after",
                        "type": "string"
                    },
                    {
                        "name": "position",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Move field",
                "name": "moveField",
                "details": "Moves field on the given tab",
                "verb": "POST",
                "url": "rest/api/2/screens/:screenId/tabs/:tabId/fields/:id/move",
                "path": "/:screenId/tabs/:tabId/fields/:id/move",
                "responseType": null
            },
            "moveTab": {
                "urlParams": [
                    {
                        "name": "screenId",
                        "type": "string"
                    },
                    {
                        "name": "tabId",
                        "type": "string"
                    },
                    {
                        "name": "pos",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Move tab",
                "name": "moveTab",
                "details": "Moves tab position",
                "verb": "POST",
                "url": "rest/api/2/screens/:screenId/tabs/:tabId/move/:pos",
                "path": "/:screenId/tabs/:tabId/move/:pos",
                "responseType": null
            },
            "addFieldToDefaultScreen": {
                "urlParams": [
                    {
                        "name": "fieldId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Add field to default screen",
                "name": "addFieldToDefaultScreen",
                "details": "Adds field or custom field to the default tab",
                "verb": "POST",
                "url": "rest/api/2/screens/addToDefault/:fieldId",
                "path": "/addToDefault/:fieldId",
                "responseType": null
            }
        }
    },
    "Search": {
        "name": "Search",
        "description": "Resource for searches.",
        "methods": {
            "searchUsingSearchRequest": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "jql",
                        "type": "string"
                    },
                    {
                        "name": "startAt",
                        "type": "integer"
                    },
                    {
                        "name": "maxResults",
                        "type": "integer"
                    },
                    {
                        "name": "fields",
                        "type": "array"
                    },
                    {
                        "name": "validateQuery",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Search using search request",
                "name": "searchUsingSearchRequest",
                "details": "Performs a search using JQL.",
                "verb": "POST",
                "url": "rest/api/2/search",
                "path": "/",
                "responseType": "object"
            },
            "search": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "jql",
                        "type": "string",
                        "description": "a JQL query string"
                    },
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the index of the first issue to return (0-based)"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of issues to return (defaults to 50). The maximum allowable value is\n                      dictated by the JIRA property 'jira.search.views.default.max'. If you specify a value that is higher than this\n                      number, your search results will be truncated."
                    },
                    {
                        "name": "validateQuery",
                        "type": "boolean",
                        "description": "Default: truewhether to validate the JQL query"
                    },
                    {
                        "name": "fields",
                        "type": "string",
                        "description": "the list of fields to return for each issue. By default, all navigable fields are returned."
                    },
                    {
                        "name": "expand",
                        "type": "string",
                        "description": "A comma-separated list of the parameters to expand."
                    }
                ],
                "description": "Search",
                "name": "search",
                "details": "Searches for issues using JQL.\n \n Sorting\n the jql parameter is a full JQL\n expression, and includes an ORDER BY clause.\n \n The fields param (which can be specified multiple times) gives a comma-separated list of fields\n to include in the response. This can be used to retrieve a subset of fields.\n A particular field can be excluded by prefixing it with a minus.\n \n By default, only navigable (*navigable) fields are returned in this search resource. Note: the default is different\n in the get-issue resource -- the default there all fields (*all).\n \n *all - include all fields\n *navigable - include just navigable fields\n summary,comment - include just the summary and comments\n -description - include navigable fields except the description (the default is *navigable for search)\n *all,-comment - include everything except comments\n \n \n GET vs POST:\n If the JQL query is too large to be encoded as a query param you should instead\n POST to this resource.\n \n Expanding Issues in the Search Result:\n It is possible to expand the issues returned by directly specifying the expansion on the expand parameter passed\n in to this resources.\n \n For instance, to expand the \"changelog\" for all the issues on the search result, it is neccesary to\n specify \"changelog\" as one of the values to expand.\n a JQL query stringthe index of the first issue to return (0-based)the maximum number of issues to return (defaults to 50). The maximum allowable value is\n                      dictated by the JIRA property 'jira.search.views.default.max'. If you specify a value that is higher than this\n                      number, your search results will be truncated.Default: truewhether to validate the JQL querythe list of fields to return for each issue. By default, all navigable fields are returned.A comma-separated list of the parameters to expand.",
                "verb": "GET",
                "url": "rest/api/2/search",
                "path": "/",
                "responseType": "object"
            }
        }
    },
    "Securitylevel": {
        "name": "Securitylevel",
        "description": "",
        "methods": {
            "getIssuesecuritylevel": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get issuesecuritylevel",
                "name": "getIssuesecuritylevel",
                "details": "Returns a full representation of the security level that has the given id.",
                "verb": "GET",
                "url": "rest/api/2/securitylevel/:id",
                "path": "/:id",
                "responseType": "object"
            }
        }
    },
    "ServerInfo": {
        "name": "ServerInfo",
        "description": "",
        "methods": {
            "findById": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "doHealthCheck",
                        "type": "boolean",
                        "description": ""
                    }
                ],
                "description": "Get server info",
                "name": "findById",
                "details": "Returns general information about the current JIRA server.",
                "verb": "GET",
                "url": "rest/api/2/serverInfo",
                "path": "/",
                "responseType": "object"
            }
        }
    },
    "Settings": {
        "name": "Settings",
        "description": "REST resource for changing the JIRA system settings",
        "methods": {
            "setBaseURL": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Set base u r l",
                "name": "setBaseURL",
                "details": "Sets the base URL that is configured for this JIRA instance.",
                "verb": "PUT",
                "url": "rest/api/2/settings/baseUrl",
                "path": "/baseUrl"
            },
            "getIssueNavigatorDefaultColumns": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get issue navigator default columns",
                "name": "getIssueNavigatorDefaultColumns",
                "details": "Returns the default system columns for issue navigator. Admin permission will be required.",
                "verb": "GET",
                "url": "rest/api/2/settings/columns",
                "path": "/columns",
                "responseType": "object"
            },
            "setIssueNavigatorDefaultColumns": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Set issue navigator default columns",
                "name": "setIssueNavigatorDefaultColumns",
                "details": "Sets the default system columns for issue navigator. Admin permission will be required.",
                "verb": "PUT",
                "url": "rest/api/2/settings/columns",
                "path": "/columns",
                "responseType": null
            }
        }
    },
    "Status": {
        "name": "Status",
        "description": "",
        "methods": {
            "getStatuses": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get statuses",
                "name": "getStatuses",
                "details": "Returns a list of all statuses",
                "verb": "GET",
                "url": "rest/api/2/status",
                "path": "/",
                "responseType": "array"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "idOrName",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get status",
                "name": "findById",
                "details": "Returns a full representation of the Status having the given id or name.",
                "verb": "GET",
                "url": "rest/api/2/status/:idOrName",
                "path": "/:idOrName",
                "responseType": "object"
            }
        }
    },
    "Statuscategory": {
        "name": "Statuscategory",
        "description": "",
        "methods": {
            "getStatusCategories": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get status categories",
                "name": "getStatusCategories",
                "details": "Returns a list of all status categories",
                "verb": "GET",
                "url": "rest/api/2/statuscategory",
                "path": "/",
                "responseType": "array"
            },
            "getStatusCategory": {
                "urlParams": [
                    {
                        "name": "idOrKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get status category",
                "name": "getStatusCategory",
                "details": "Returns a full representation of the StatusCategory having the given id or key",
                "verb": "GET",
                "url": "rest/api/2/statuscategory/:idOrKey",
                "path": "/:idOrKey",
                "responseType": "object"
            }
        }
    },
    "Universal_avatar": {
        "name": "Universal_avatar",
        "description": "",
        "methods": {
            "getAvatars": {
                "urlParams": [
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "owningObjectId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get avatars",
                "name": "getAvatars",
                "details": "",
                "verb": "GET",
                "url": "rest/api/2/universal_avatar/type/:type/owner/:owningObjectId",
                "path": "/type/:type/owner/:owningObjectId",
                "responseType": null
            },
            "createAvatarFromTemporary": {
                "urlParams": [
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "owningObjectId",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "cropperWidth",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetX",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetY",
                        "type": "integer"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "needsCropping",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Create avatar from temporary",
                "name": "createAvatarFromTemporary",
                "details": "",
                "verb": "POST",
                "url": "rest/api/2/universal_avatar/type/:type/owner/:owningObjectId/avatar",
                "path": "/type/:type/owner/:owningObjectId/avatar",
                "responseType": null
            },
            "deleteAvatar": {
                "urlParams": [
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "owningObjectId",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete avatar",
                "name": "deleteAvatar",
                "details": "Deletes avatar",
                "verb": "DELETE",
                "url": "rest/api/2/universal_avatar/type/:type/owner/:owningObjectId/avatar/:id",
                "path": "/type/:type/owner/:owningObjectId/avatar/:id",
                "responseType": null
            },
            "storeTemporaryAvatar": {
                "urlParams": [
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "owningObjectId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": "name of file being uploaded"
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": "size of file"
                    }
                ],
                "description": "Store temporary avatar",
                "name": "storeTemporaryAvatar",
                "details": "Creates temporary avatarname of file being uploadedsize of file",
                "verb": "POST",
                "url": "rest/api/2/universal_avatar/type/:type/owner/:owningObjectId/temp",
                "path": "/type/:type/owner/:owningObjectId/temp",
                "responseType": null
            },
            "storeTemporaryAvatarUsingMultiPart": {
                "urlParams": [
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "owningObjectId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Store temporary avatar using multi part",
                "name": "storeTemporaryAvatarUsingMultiPart",
                "details": "",
                "verb": "POST",
                "url": "rest/api/2/universal_avatar/type/:type/owner/:owningObjectId/temp",
                "path": "/type/:type/owner/:owningObjectId/temp",
                "responseType": null
            }
        }
    },
    "Upgrade": {
        "name": "Upgrade",
        "description": "REST resource for executing and querying delayed upgrades.",
        "methods": {
            "runUpgradesNow": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Run upgrades now",
                "name": "runUpgradesNow",
                "details": "Runs any pending delayed upgrade tasks.  Need Admin permissions to do this.",
                "verb": "POST",
                "url": "rest/api/2/upgrade",
                "path": "/",
                "responseType": null
            },
            "getUpgradeResult": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Get upgrade result",
                "name": "getUpgradeResult",
                "details": "Returns the result of the last upgrade task.\n\n Returns {@link javax.ws.rs.core.Response#seeOther(java.net.URI)} if still running.",
                "verb": "GET",
                "url": "rest/api/2/upgrade",
                "path": "/",
                "responseType": "object"
            }
        }
    },
    "User": {
        "name": "User",
        "description": "",
        "methods": {
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    },
                    {
                        "name": "emailAddress",
                        "type": "string"
                    },
                    {
                        "name": "displayName",
                        "type": "string"
                    },
                    {
                        "name": "notification",
                        "type": "string"
                    },
                    {
                        "name": "applicationKeys",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Create user",
                "name": "create",
                "details": "Create user. By default created user will not be notified with email.\n If password field is not set then password will be randomly generated.",
                "verb": "POST",
                "url": "rest/api/2/user",
                "path": "/",
                "responseType": "object"
            },
            "update": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    },
                    {
                        "name": "emailAddress",
                        "type": "string"
                    },
                    {
                        "name": "displayName",
                        "type": "string"
                    },
                    {
                        "name": "notification",
                        "type": "string"
                    },
                    {
                        "name": "applicationKeys",
                        "type": "array"
                    }
                ],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "the username"
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "description": "user key"
                    }
                ],
                "description": "Update user",
                "name": "update",
                "details": "Modify user. The \"value\" fields present will override the existing value.\n Fields skipped in request will not be changed.the usernameuser key",
                "verb": "PUT",
                "url": "rest/api/2/user",
                "path": "/",
                "responseType": "object"
            },
            "deleteById": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "the username"
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "description": "user key"
                    }
                ],
                "description": "Remove user",
                "name": "deleteById",
                "details": "Removes user.the usernameuser key",
                "verb": "DELETE",
                "url": "rest/api/2/user",
                "path": "/",
                "responseType": null
            },
            "findById": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "the username"
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "description": "user key"
                    }
                ],
                "description": "Get user",
                "name": "findById",
                "details": "Returns a user. This resource cannot be accessed anonymously.the usernameuser key",
                "verb": "GET",
                "url": "rest/api/2/user",
                "path": "/",
                "responseType": "object"
            },
            "addUserToApplication": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username"
                    },
                    {
                        "name": "applicationKey",
                        "type": "string",
                        "description": "application key"
                    }
                ],
                "description": "Add user to application",
                "name": "addUserToApplication",
                "details": "Add user to given application. Admin permission will be required to perform this operation.usernameapplication key",
                "verb": "POST",
                "url": "rest/api/2/user/application",
                "path": "/application",
                "responseType": null
            },
            "removeUserFromApplication": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username"
                    },
                    {
                        "name": "applicationKey",
                        "type": "string",
                        "description": "application key"
                    }
                ],
                "description": "Remove user from application",
                "name": "removeUserFromApplication",
                "details": "Remove user from given application. Admin permission will be required to perform this operation.usernameapplication key",
                "verb": "DELETE",
                "url": "rest/api/2/user/application",
                "path": "/application",
                "responseType": null
            },
            "findBulkAssignableUsers": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "the username"
                    },
                    {
                        "name": "projectKeys",
                        "type": "string",
                        "description": "the keys of the projects we are finding assignable users for, comma-separated"
                    },
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the index of the first user to return (0-based)"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                       If you specify a value that is higher than this number, your search results will be truncated."
                    }
                ],
                "description": "Find bulk assignable users",
                "name": "findBulkAssignableUsers",
                "details": "Returns a list of users that match the search string and can be assigned issues for all the given projects.\n This resource cannot be accessed anonymously.the usernamethe keys of the projects we are finding assignable users for, comma-separatedthe index of the first user to return (0-based)the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                       If you specify a value that is higher than this number, your search results will be truncated.",
                "verb": "GET",
                "url": "rest/api/2/user/assignable/multiProjectSearch",
                "path": "/assignable/multiProjectSearch",
                "responseType": "array"
            },
            "findAssignableUsers": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "the username"
                    },
                    {
                        "name": "project",
                        "type": "string",
                        "description": "the key of the project we are finding assignable users for"
                    },
                    {
                        "name": "issueKey",
                        "type": "string",
                        "description": "the issue key for the issue being edited we need to find assignable users for."
                    },
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the index of the first user to return (0-based)"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                   If you specify a value that is higher than this number, your search results will be truncated."
                    },
                    {
                        "name": "actionDescriptorId",
                        "type": "number",
                        "description": ""
                    }
                ],
                "description": "Find assignable users",
                "name": "findAssignableUsers",
                "details": "Returns a list of users that match the search string. This resource cannot be accessed anonymously.\n Please note that this resource should be called with an issue key when a list of assignable users is retrieved\n for editing.  For create only a project key should be supplied.  The list of assignable users may be incorrect\n if it's called with the project key for editing.the usernamethe key of the project we are finding assignable users forthe issue key for the issue being edited we need to find assignable users for.the index of the first user to return (0-based)the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                   If you specify a value that is higher than this number, your search results will be truncated.",
                "verb": "GET",
                "url": "rest/api/2/user/assignable/search",
                "path": "/assignable/search",
                "responseType": "object"
            },
            "createAvatarFromTemporary": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "cropperWidth",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetX",
                        "type": "integer"
                    },
                    {
                        "name": "cropperOffsetY",
                        "type": "integer"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "needsCropping",
                        "type": "boolean"
                    }
                ],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username"
                    }
                ],
                "description": "Create avatar from temporary",
                "name": "createAvatarFromTemporary",
                "details": "Converts temporary avatar into a real avatarusername",
                "verb": "POST",
                "url": "rest/api/2/user/avatar",
                "path": "/avatar",
                "responseType": "object"
            },
            "updateProjectAvatar": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "owner",
                        "type": "string"
                    },
                    {
                        "name": "isSystemAvatar",
                        "type": "boolean"
                    },
                    {
                        "name": "isSelected",
                        "type": "boolean"
                    },
                    {
                        "name": "isDeletable",
                        "type": "boolean"
                    },
                    {
                        "name": "urls",
                        "type": "object"
                    },
                    {
                        "name": "selected",
                        "type": "boolean"
                    }
                ],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Update project avatar",
                "name": "updateProjectAvatar",
                "details": "",
                "verb": "PUT",
                "url": "rest/api/2/user/avatar",
                "path": "/avatar",
                "responseType": null
            },
            "deleteAvatar": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username"
                    }
                ],
                "description": "Delete avatar",
                "name": "deleteAvatar",
                "details": "Deletes avatarusername",
                "verb": "DELETE",
                "url": "rest/api/2/user/avatar/:id",
                "path": "/avatar/:id",
                "responseType": null
            },
            "storeTemporaryAvatar": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username"
                    },
                    {
                        "name": "filename",
                        "type": "string",
                        "description": "name of file being uploaded"
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": "size of file"
                    }
                ],
                "description": "Store temporary avatar",
                "name": "storeTemporaryAvatar",
                "details": "Creates temporary avatar. Creating a temporary avatar is part of a 3-step process in uploading a new\n avatar for a user: upload, crop, confirm.\n \n The following examples shows these three steps using curl.\n The cookies (session) need to be preserved between requests, hence the use of -b and -c.\n The id created in step 2 needs to be passed to step 3\n (you can simply pass the whole response of step 2 as the request of step 3).\n \n \n curl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n   -H \"Content-Type: image/png\" --data-binary @mynewavatar.png \\\n   'http://localhost:8090/jira/rest/api/2/user/avatar/temporary?username=admin&filename=mynewavatar.png'\n\n curl -b cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n   -H \"Content-Type: application/json\" --data '{\"cropperWidth\": \"65\",\"cropperOffsetX\": \"10\",\"cropperOffsetY\": \"16\"}' \\\n   -o tmpid.json \\\n   http://localhost:8090/jira/rest/api/2/user/avatar?username=admin\n\n curl -b cookiejar.txt -X PUT -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n   -H \"Content-Type: application/json\" --data-binary @tmpid.json \\\n   http://localhost:8090/jira/rest/api/2/user/avatar?username=admin\n usernamename of file being uploadedsize of file",
                "verb": "POST",
                "url": "rest/api/2/user/avatar/temporary",
                "path": "/avatar/temporary",
                "responseType": "object"
            },
            "storeTemporaryAvatarUsingMultiPart": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "Username"
                    }
                ],
                "description": "Store temporary avatar using multi part",
                "name": "storeTemporaryAvatarUsingMultiPart",
                "details": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because\n the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from\n which the client parses the JSON from.\n \n Creating a temporary avatar is part of a 3-step process in uploading a new\n avatar for a user: upload, crop, confirm. This endpoint allows you to use a multipart upload\n instead of sending the image directly as the request body.\n \n You *must* use \"avatar\" as the name of the upload parameter:\n \n curl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n   -F \"avatar=@mynewavatar.png;type=image/png\" \\\n   'http://localhost:8090/jira/rest/api/2/user/avatar/temporary?username=admin'\n Username",
                "verb": "POST",
                "url": "rest/api/2/user/avatar/temporary",
                "path": "/avatar/temporary",
                "responseType": "object"
            },
            "getAllAvatars": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username"
                    }
                ],
                "description": "Get all avatars",
                "name": "getAllAvatars",
                "details": "Returns all avatars which are visible for the currently logged in user.username",
                "verb": "GET",
                "url": "rest/api/2/user/avatars",
                "path": "/avatars",
                "responseType": "object"
            },
            "defaultColumns": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username"
                    }
                ],
                "description": "Default columns",
                "name": "defaultColumns",
                "details": "Returns the default columns for the given user. Admin permission will be required to get columns for a user\n other than the currently logged in user.username",
                "verb": "GET",
                "url": "rest/api/2/user/columns",
                "path": "/columns",
                "responseType": "object"
            },
            "setColumns": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Set columns",
                "name": "setColumns",
                "details": "Sets the default columns for the given user.  Admin permission will be required to get columns for a user\n other than the currently logged in user.",
                "verb": "PUT",
                "url": "rest/api/2/user/columns",
                "path": "/columns",
                "responseType": null
            },
            "resetColumns": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username"
                    }
                ],
                "description": "Reset columns",
                "name": "resetColumns",
                "details": "Reset the default columns for the given user to the system default. Admin permission will be required to get\n columns for a user other than the currently logged in user.username",
                "verb": "DELETE",
                "url": "rest/api/2/user/columns",
                "path": "/columns",
                "responseType": null
            },
            "changeUserPassword": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "password",
                        "type": "string"
                    },
                    {
                        "name": "currentPassword",
                        "type": "string"
                    }
                ],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "the username"
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "description": "user key"
                    }
                ],
                "description": "Change user password",
                "name": "changeUserPassword",
                "details": "Modify user password.the usernameuser key",
                "verb": "PUT",
                "url": "rest/api/2/user/password",
                "path": "/password",
                "responseType": null
            },
            "findUsersWithAllPermissions": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "the username filter, list includes all users if unspecified"
                    },
                    {
                        "name": "permissions",
                        "type": "string",
                        "description": "comma separated list of permissions for project or issue returned users must have, see\n                    Permissions\n                    JavaDoc for the list of all possible permissions."
                    },
                    {
                        "name": "issueKey",
                        "type": "string",
                        "description": "the issue key for the issue for which returned users have specified permissions."
                    },
                    {
                        "name": "projectKey",
                        "type": "string",
                        "description": "the optional project key to search for users with if no issueKey is supplied."
                    },
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the index of the first user to return (0-based)"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                    If you specify a value that is higher than this number, your search results will be truncated."
                    }
                ],
                "description": "Find users with all permissions",
                "name": "findUsersWithAllPermissions",
                "details": "Returns a list of active users that match the search string and have all specified permissions for the project or issue.\n This resource can be accessed by users with ADMINISTER_PROJECT permission for the project or global ADMIN or SYSADMIN rights.the username filter, list includes all users if unspecifiedcomma separated list of permissions for project or issue returned users must have, see\n                    Permissions\n                    JavaDoc for the list of all possible permissions.the issue key for the issue for which returned users have specified permissions.the optional project key to search for users with if no issueKey is supplied.the index of the first user to return (0-based)the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                    If you specify a value that is higher than this number, your search results will be truncated.",
                "verb": "GET",
                "url": "rest/api/2/user/permission/search",
                "path": "/permission/search",
                "responseType": "array"
            },
            "findUsersForPicker": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "query",
                        "type": "string",
                        "description": "A string used to search username, Name or e-mail address"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                   If you specify a value that is higher than this number, your search results will be truncated."
                    },
                    {
                        "name": "showAvatar",
                        "type": "boolean",
                        "description": ""
                    },
                    {
                        "name": "exclude",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Find users for picker",
                "name": "findUsersForPicker",
                "details": "Returns a list of users matching query with highlighting. This resource cannot be accessed anonymously.A string used to search username, Name or e-mail addressthe maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                   If you specify a value that is higher than this number, your search results will be truncated.",
                "verb": "GET",
                "url": "rest/api/2/user/picker",
                "path": "/picker",
                "responseType": "object"
            },
            "find": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "A query string used to search username, name or e-mail address"
                    },
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the index of the first user to return (0-based)"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                        If you specify a value that is higher than this number, your search results will be truncated."
                    },
                    {
                        "name": "includeActive",
                        "type": "boolean",
                        "description": "If true, then active users are included in the results (default true)"
                    },
                    {
                        "name": "includeInactive",
                        "type": "boolean",
                        "description": "If true, then inactive users are included in the results (default false)"
                    }
                ],
                "description": "Find users",
                "name": "find",
                "details": "Returns a list of users that match the search string. This resource cannot be accessed anonymously.A query string used to search username, name or e-mail addressthe index of the first user to return (0-based)the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                        If you specify a value that is higher than this number, your search results will be truncated.If true, then active users are included in the results (default true)If true, then inactive users are included in the results (default false)",
                "verb": "GET",
                "url": "rest/api/2/user/search",
                "path": "/search",
                "responseType": "array"
            },
            "findUsersWithBrowsePermission": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "username",
                        "type": "string",
                        "description": "the username filter, no users returned if left blank"
                    },
                    {
                        "name": "issueKey",
                        "type": "string",
                        "description": "the issue key for the issue being edited we need to find viewable users for."
                    },
                    {
                        "name": "projectKey",
                        "type": "string",
                        "description": "the optional project key to search for users with if no issueKey is supplied."
                    },
                    {
                        "name": "startAt",
                        "type": "number",
                        "description": "the index of the first user to return (0-based)"
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "description": "the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                   If you specify a value that is higher than this number, your search results will be truncated."
                    }
                ],
                "description": "Find users with browse permission",
                "name": "findUsersWithBrowsePermission",
                "details": "Returns a list of active users that match the search string. This resource cannot be accessed anonymously \n and requires the Browse Users global permission.\n Given an issue key this resource will provide a list of users that match the search string and have\n the browse issue permission for the issue provided.the username filter, no users returned if left blankthe issue key for the issue being edited we need to find viewable users for.the optional project key to search for users with if no issueKey is supplied.the index of the first user to return (0-based)the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.\n                   If you specify a value that is higher than this number, your search results will be truncated.",
                "verb": "GET",
                "url": "rest/api/2/user/viewissue/search",
                "path": "/viewissue/search",
                "responseType": "array"
            }
        }
    },
    "UserProperties": {
        "name": "UserProperties",
        "description": "",
        "methods": {
            "getPropertiesKeys": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "userKey",
                        "type": "string",
                        "description": "key of the user whose properties are to be returned"
                    },
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username of the user whose properties are to be returned"
                    }
                ],
                "description": "Get properties keys",
                "name": "getPropertiesKeys",
                "details": "Returns the keys of all properties for the user identified by the key or by the id.key of the user whose properties are to be returnedusername of the user whose properties are to be returned",
                "verb": "GET",
                "url": "rest/api/2/user/properties",
                "path": "/properties",
                "responseType": "object"
            },
            "deleteProperty": {
                "urlParams": [
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "userKey",
                        "type": "string",
                        "description": "key of the user whose property is to be removed"
                    },
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username of the user whose property is to be removed"
                    }
                ],
                "description": "Delete property",
                "name": "deleteProperty",
                "details": "Removes the property from the user identified by the key or by the id. Ths user removing the property is required\n to have permissions to administer the user.key of the user whose property is to be removedusername of the user whose property is to be removed",
                "verb": "DELETE",
                "url": "rest/api/2/user/properties/:propertyKey",
                "path": "/properties/:propertyKey",
                "responseType": null
            },
            "setProperty": {
                "urlParams": [
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "userKey",
                        "type": "string",
                        "description": "key of the user whose property is to be set"
                    },
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username of the user whose property is to be set"
                    }
                ],
                "description": "Set property",
                "name": "setProperty",
                "details": "Sets the value of the specified user's property.\n \n You can use this resource to store a custom data against the user identified by the key or by the id. The user\n who stores the data is required to have permissions to administer the user.\n key of the user whose property is to be setusername of the user whose property is to be set",
                "verb": "PUT",
                "url": "rest/api/2/user/properties/:propertyKey",
                "path": "/properties/:propertyKey",
                "responseType": null
            },
            "getProperty": {
                "urlParams": [
                    {
                        "name": "propertyKey",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "userKey",
                        "type": "string",
                        "description": "key of the user whose property is to be returned"
                    },
                    {
                        "name": "username",
                        "type": "string",
                        "description": "username of the user whose property is to be returned"
                    }
                ],
                "description": "Get property",
                "name": "getProperty",
                "details": "Returns the value of the property with a given key from the user identified by the key or by the id. The user who retrieves\n the property is required to have permissions to read the user.key of the user whose property is to be returnedusername of the user whose property is to be returned",
                "verb": "GET",
                "url": "rest/api/2/user/properties/:propertyKey",
                "path": "/properties/:propertyKey",
                "responseType": "object"
            }
        }
    },
    "Version": {
        "name": "Version",
        "description": "",
        "methods": {
            "create": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "archived",
                        "type": "boolean"
                    },
                    {
                        "name": "released",
                        "type": "boolean"
                    },
                    {
                        "name": "overdue",
                        "type": "boolean"
                    },
                    {
                        "name": "userStartDate",
                        "type": "string"
                    },
                    {
                        "name": "userReleaseDate",
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "type": "integer"
                    },
                    {
                        "name": "moveUnfixedIssuesTo",
                        "type": "string"
                    },
                    {
                        "name": "operations",
                        "type": "array"
                    },
                    {
                        "name": "remotelinks",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Create version",
                "name": "create",
                "details": "Create a version via POST.",
                "verb": "POST",
                "url": "rest/api/2/version",
                "path": "/",
                "responseType": "object"
            },
            "moveVersion": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "after",
                        "type": "string"
                    },
                    {
                        "name": "position",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Move version",
                "name": "moveVersion",
                "details": "Modify a version's sequence within a project.\n \n The move version bean has 2 alternative field value pairs:\n \n positionAn absolute position, which may have a value of 'First', 'Last', 'Earlier' or 'Later'\n afterA version to place this version after.  The value should be the self link of another version\n ",
                "verb": "POST",
                "url": "rest/api/2/version/:id/move",
                "path": "/:id/move",
                "responseType": "object"
            },
            "findById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "expand",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get version",
                "name": "findById",
                "details": "Returns a project version.",
                "verb": "GET",
                "url": "rest/api/2/version/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "update": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "archived",
                        "type": "boolean"
                    },
                    {
                        "name": "released",
                        "type": "boolean"
                    },
                    {
                        "name": "overdue",
                        "type": "boolean"
                    },
                    {
                        "name": "userStartDate",
                        "type": "string"
                    },
                    {
                        "name": "userReleaseDate",
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "type": "integer"
                    },
                    {
                        "name": "moveUnfixedIssuesTo",
                        "type": "string"
                    },
                    {
                        "name": "operations",
                        "type": "array"
                    },
                    {
                        "name": "remotelinks",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Update version",
                "name": "update",
                "details": "Modify a version via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field\n is not present, it is silently ignored.",
                "verb": "PUT",
                "url": "rest/api/2/version/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "delete": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "moveFixIssuesTo",
                        "type": "string",
                        "description": "The version to set fixVersion to on issues where the deleted version is the fix version,\n                             If null then the fixVersion is removed."
                    },
                    {
                        "name": "moveAffectedIssuesTo",
                        "type": "string",
                        "description": "The version to set affectedVersion to on issues where the deleted version is the affected version,\n                             If null then the affectedVersion is removed."
                    }
                ],
                "description": "Delete",
                "name": "delete",
                "details": "Delete a project version.The version to set fixVersion to on issues where the deleted version is the fix version,\n                             If null then the fixVersion is removed.The version to set affectedVersion to on issues where the deleted version is the affected version,\n                             If null then the affectedVersion is removed.",
                "verb": "DELETE",
                "url": "rest/api/2/version/:id",
                "path": "/:id",
                "responseType": null
            },
            "merge": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "moveIssuesTo",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Merge",
                "name": "merge",
                "details": "Merge versions",
                "verb": "PUT",
                "url": "rest/api/2/version/:id/mergeto/:moveIssuesTo",
                "path": "/:id/mergeto/:moveIssuesTo",
                "responseType": null
            },
            "getVersionRelatedIssues": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get version related issues",
                "name": "getVersionRelatedIssues",
                "details": "Returns a bean containing the number of fixed in and affected issues for the given version.",
                "verb": "GET",
                "url": "rest/api/2/version/:id/relatedIssueCounts",
                "path": "/:id/relatedIssueCounts",
                "responseType": "object"
            },
            "getVersionUnresolvedIssues": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get version unresolved issues",
                "name": "getVersionUnresolvedIssues",
                "details": "Returns the number of unresolved issues for the given version",
                "verb": "GET",
                "url": "rest/api/2/version/:id/unresolvedIssueCount",
                "path": "/:id/unresolvedIssueCount",
                "responseType": "object"
            },
            "getRemoteVersionLinksByVersionId": {
                "urlParams": [
                    {
                        "name": "versionId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get remote version links by version id",
                "name": "getRemoteVersionLinksByVersionId",
                "details": "Returns the remote version links associated with the given version ID.",
                "verb": "GET",
                "url": "rest/api/2/version/:versionId/remotelink",
                "path": "/:versionId/remotelink",
                "responseType": "object"
            },
            "createOrUpdateRemoteVersionLink": {
                "urlParams": [
                    {
                        "name": "versionId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Create or update remote version link",
                "name": "createOrUpdateRemoteVersionLink",
                "details": "Create a remote version link via POST.  The link's global ID will be taken from the\n JSON payload if provided; otherwise, it will be generated.",
                "verb": "POST",
                "url": "rest/api/2/version/:versionId/remotelink",
                "path": "/:versionId/remotelink",
                "responseType": "object"
            },
            "deleteRemoteVersionLinksByVersionId": {
                "urlParams": [
                    {
                        "name": "versionId",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete remote version links by version id",
                "name": "deleteRemoteVersionLinksByVersionId",
                "details": "Delete all remote version links for a given version ID.",
                "verb": "DELETE",
                "url": "rest/api/2/version/:versionId/remotelink",
                "path": "/:versionId/remotelink",
                "responseType": null
            },
            "getRemoteVersionLinks": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "globalId",
                        "type": "string",
                        "description": "the global ID of the remote resource that is linked to the versions"
                    }
                ],
                "description": "Get remote version links",
                "name": "getRemoteVersionLinks",
                "details": "Returns the remote version links for a given global ID.the global ID of the remote resource that is linked to the versions",
                "verb": "GET",
                "url": "rest/api/2/version/remotelink",
                "path": "/remotelink",
                "responseType": "object"
            }
        }
    },
    "Workflow": {
        "name": "Workflow",
        "description": "REST resource for retrieving workflows.",
        "methods": {
            "find": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": ""
                    }
                ],
                "description": "Get all workflows",
                "name": "find",
                "details": "Returns all workflows.",
                "verb": "GET",
                "url": "rest/api/2/workflow",
                "path": "/",
                "responseType": "object"
            },
            "deleteProperty": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "key",
                        "type": "string",
                        "description": "the name of the property to add."
                    },
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the name of the workflow to use."
                    },
                    {
                        "name": "workflowMode",
                        "type": "string",
                        "description": "the type of workflow to use. Can either be \"live\" or \"draft\"."
                    }
                ],
                "description": "Delete property",
                "name": "deleteProperty",
                "details": "Delete a property from the passed transition on the passed workflow. It is not an error to delete a property that\n does not exist.the name of the property to add.the name of the workflow to use.the type of workflow to use. Can either be \"live\" or \"draft\".",
                "verb": "DELETE",
                "url": "rest/api/2/workflow/:id/properties",
                "path": "/:id/properties",
                "responseType": null
            },
            "createProperty": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "queryParams": [
                    {
                        "name": "key",
                        "type": "string",
                        "description": "the name of the property to add."
                    },
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the name of the workflow to use."
                    },
                    {
                        "name": "workflowMode",
                        "type": "string",
                        "description": "the type of workflow to use. Can either be \"live\" or \"draft\"."
                    }
                ],
                "description": "Create property",
                "name": "createProperty",
                "details": "Add a new property to a transition. Trying to add a property that already\n exists will fail.the name of the property to add.the name of the workflow to use.the type of workflow to use. Can either be \"live\" or \"draft\".",
                "verb": "POST",
                "url": "rest/api/2/workflow/:id/properties",
                "path": "/:id/properties",
                "responseType": "object"
            },
            "updateProperty": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "queryParams": [
                    {
                        "name": "key",
                        "type": "string",
                        "description": "the name of the property to add."
                    },
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the name of the workflow to use."
                    },
                    {
                        "name": "workflowMode",
                        "type": "string",
                        "description": "the type of workflow to use. Can either be \"live\" or \"draft\"."
                    }
                ],
                "description": "Update property",
                "name": "updateProperty",
                "details": "Update/add new property to a transition. Trying to update a property that does\n not exist will result in a new property being added.the name of the property to add.the name of the workflow to use.the type of workflow to use. Can either be \"live\" or \"draft\".",
                "verb": "PUT",
                "url": "rest/api/2/workflow/:id/properties",
                "path": "/:id/properties",
                "responseType": "object"
            },
            "getProperties": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "includeReservedKeys",
                        "type": "boolean",
                        "description": "some keys under the \"jira.\" prefix are editable, some are not. Set this to true\n                            in order to include the non-editable keys in the response."
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "description": "the name of the property key to query. Can be left off the query to return all properties."
                    },
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the name of the workflow to use."
                    },
                    {
                        "name": "workflowMode",
                        "type": "string",
                        "description": "the type of workflow to use. Can either be \"live\" or \"draft\"."
                    }
                ],
                "description": "Get properties",
                "name": "getProperties",
                "details": "Return the property or properties associated with a transition.some keys under the \"jira.\" prefix are editable, some are not. Set this to true\n                            in order to include the non-editable keys in the response.the name of the property key to query. Can be left off the query to return all properties.the name of the workflow to use.the type of workflow to use. Can either be \"live\" or \"draft\".",
                "verb": "GET",
                "url": "rest/api/2/workflow/:id/properties",
                "path": "/:id/properties",
                "responseType": "object"
            }
        }
    },
    "Workflowscheme": {
        "name": "Workflowscheme",
        "description": "",
        "methods": {
            "createScheme": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "id",
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "defaultWorkflow",
                        "type": "string"
                    },
                    {
                        "name": "issueTypeMappings",
                        "type": "object"
                    },
                    {
                        "name": "originalDefaultWorkflow",
                        "type": "string"
                    },
                    {
                        "name": "originalIssueTypeMappings",
                        "type": "object"
                    },
                    {
                        "name": "draft",
                        "type": "boolean"
                    },
                    {
                        "name": "lastModifiedUser",
                        "type": "object"
                    },
                    {
                        "name": "lastModified",
                        "type": "string"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    },
                    {
                        "name": "issueTypes",
                        "type": "object"
                    }
                ],
                "queryParams": [],
                "description": "Create scheme",
                "name": "createScheme",
                "details": "Create a new workflow scheme.\n \n The body contains a representation of the new scheme. Values not passed are assumed to be set to their defaults.",
                "verb": "POST",
                "url": "rest/api/2/workflowscheme",
                "path": "/",
                "responseType": "object"
            },
            "getById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "returnDraftIfExists",
                        "type": "boolean",
                        "description": "Default: falsewhen true indicates that a scheme's draft, if it exists, should be queried instead of\n                            the scheme itself."
                    }
                ],
                "description": "Get by id",
                "name": "getById",
                "details": "Returns the requested workflow scheme to the caller.Default: falsewhen true indicates that a scheme's draft, if it exists, should be queried instead of\n                            the scheme itself.",
                "verb": "GET",
                "url": "rest/api/2/workflowscheme/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "deleteScheme": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete scheme",
                "name": "deleteScheme",
                "details": "Delete the passed workflow scheme.",
                "verb": "DELETE",
                "url": "rest/api/2/workflowscheme/:id",
                "path": "/:id",
                "responseType": null
            },
            "update": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "defaultWorkflow",
                        "type": "string"
                    },
                    {
                        "name": "issueTypeMappings",
                        "type": "object"
                    },
                    {
                        "name": "originalDefaultWorkflow",
                        "type": "string"
                    },
                    {
                        "name": "originalIssueTypeMappings",
                        "type": "object"
                    },
                    {
                        "name": "draft",
                        "type": "boolean"
                    },
                    {
                        "name": "lastModifiedUser",
                        "type": "object"
                    },
                    {
                        "name": "lastModified",
                        "type": "string"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    },
                    {
                        "name": "issueTypes",
                        "type": "object"
                    }
                ],
                "queryParams": [],
                "description": "Update",
                "name": "update",
                "details": "Update the passed workflow scheme.\n \n The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate\n no change for that field.\n \n The passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft\n should be created and/or updated when the actual scheme cannot be edited (e.g. when the scheme is being used by\n a project). Values not appearing the body will not be touched.",
                "verb": "PUT",
                "url": "rest/api/2/workflowscheme/:id",
                "path": "/:id",
                "responseType": "object"
            },
            "createDraftForParent": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Create draft for parent",
                "name": "createDraftForParent",
                "details": "Create a draft for the passed scheme. The draft will be a copy of the state of the parent.",
                "verb": "POST",
                "url": "rest/api/2/workflowscheme/:id/createdraft",
                "path": "/:id/createdraft",
                "responseType": "object"
            },
            "deleteDefault": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean",
                        "description": "when true will create and return a draft when the workflow scheme cannot be edited\n                            (e.g. when it is being used by a project)."
                    }
                ],
                "description": "Delete default",
                "name": "deleteDefault",
                "details": "Remove the default workflow from the passed workflow scheme.when true will create and return a draft when the workflow scheme cannot be edited\n                            (e.g. when it is being used by a project).",
                "verb": "DELETE",
                "url": "rest/api/2/workflowscheme/:id/default",
                "path": "/:id/default",
                "responseType": "object"
            },
            "updateDefault": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "workflow",
                        "type": "string"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Update default",
                "name": "updateDefault",
                "details": "Set the default workflow for the passed workflow scheme.\n \n The passed representation can have its\n updateDraftIfNeeded flag set to true to indicate that the draft should be created/updated when the actual scheme\n cannot be edited.",
                "verb": "PUT",
                "url": "rest/api/2/workflowscheme/:id/default",
                "path": "/:id/default",
                "responseType": "object"
            },
            "getDefault": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "returnDraftIfExists",
                        "type": "boolean",
                        "description": "Default: falsewhen true indicates that a scheme's draft, if it exists, should be queried instead of\n                            the scheme itself."
                    }
                ],
                "description": "Get default",
                "name": "getDefault",
                "details": "Return the default workflow from the passed workflow scheme.Default: falsewhen true indicates that a scheme's draft, if it exists, should be queried instead of\n                            the scheme itself.",
                "verb": "GET",
                "url": "rest/api/2/workflowscheme/:id/default",
                "path": "/:id/default",
                "responseType": "object"
            },
            "getDraftById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get draft by id",
                "name": "getDraftById",
                "details": "Returns the requested draft workflow scheme to the caller.",
                "verb": "GET",
                "url": "rest/api/2/workflowscheme/:id/draft",
                "path": "/:id/draft",
                "responseType": "object"
            },
            "deleteDraftById": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete draft by id",
                "name": "deleteDraftById",
                "details": "Delete the passed draft workflow scheme.",
                "verb": "DELETE",
                "url": "rest/api/2/workflowscheme/:id/draft",
                "path": "/:id/draft",
                "responseType": null
            },
            "updateDraft": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "id",
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "defaultWorkflow",
                        "type": "string"
                    },
                    {
                        "name": "issueTypeMappings",
                        "type": "object"
                    },
                    {
                        "name": "originalDefaultWorkflow",
                        "type": "string"
                    },
                    {
                        "name": "originalIssueTypeMappings",
                        "type": "object"
                    },
                    {
                        "name": "draft",
                        "type": "boolean"
                    },
                    {
                        "name": "lastModifiedUser",
                        "type": "object"
                    },
                    {
                        "name": "lastModified",
                        "type": "string"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    },
                    {
                        "name": "issueTypes",
                        "type": "object"
                    }
                ],
                "queryParams": [],
                "description": "Update draft",
                "name": "updateDraft",
                "details": "Update a draft workflow scheme. The draft will created if necessary.\n \n The body is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.",
                "verb": "PUT",
                "url": "rest/api/2/workflowscheme/:id/draft",
                "path": "/:id/draft",
                "responseType": "object"
            },
            "getDraftDefault": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get draft default",
                "name": "getDraftDefault",
                "details": "Return the default workflow from the passed draft workflow scheme to the caller.",
                "verb": "GET",
                "url": "rest/api/2/workflowscheme/:id/draft/default",
                "path": "/:id/draft/default",
                "responseType": "object"
            },
            "deleteDraftDefault": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete draft default",
                "name": "deleteDraftDefault",
                "details": "Remove the default workflow from the passed draft workflow scheme.",
                "verb": "DELETE",
                "url": "rest/api/2/workflowscheme/:id/draft/default",
                "path": "/:id/draft/default",
                "responseType": "object"
            },
            "updateDraftDefault": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "workflow",
                        "type": "string"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Update draft default",
                "name": "updateDraftDefault",
                "details": "Set the default workflow for the passed draft workflow scheme.",
                "verb": "PUT",
                "url": "rest/api/2/workflowscheme/:id/draft/default",
                "path": "/:id/draft/default",
                "responseType": "object"
            },
            "getDraftIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "issueType",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Get draft issue type",
                "name": "getDraftIssueType",
                "details": "Returns the issue type mapping for the passed draft workflow scheme.",
                "verb": "GET",
                "url": "rest/api/2/workflowscheme/:id/draft/issuetype/:issueType",
                "path": "/:id/draft/issuetype/:issueType",
                "responseType": "object"
            },
            "deleteDraftIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "issueType",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [],
                "description": "Delete draft issue type",
                "name": "deleteDraftIssueType",
                "details": "Remove the specified issue type mapping from the draft scheme.",
                "verb": "DELETE",
                "url": "rest/api/2/workflowscheme/:id/draft/issuetype/:issueType",
                "path": "/:id/draft/issuetype/:issueType",
                "responseType": "object"
            },
            "setDraftIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "issueType",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "issueType",
                        "type": "string"
                    },
                    {
                        "name": "workflow",
                        "type": "string"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Set draft issue type",
                "name": "setDraftIssueType",
                "details": "Set the issue type mapping for the passed draft scheme.\n \n The passed representation can have its updateDraftIfNeeded flag set to true to indicate that\n the draft should be created/updated when the actual scheme cannot be edited.",
                "verb": "PUT",
                "url": "rest/api/2/workflowscheme/:id/draft/issuetype/:issueType",
                "path": "/:id/draft/issuetype/:issueType",
                "responseType": "object"
            },
            "getDraftWorkflow": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the workflow mapping to return. Null can be passed to return all mappings. Must be a valid workflow name."
                    }
                ],
                "description": "Get draft workflow",
                "name": "getDraftWorkflow",
                "details": "Returns the draft workflow mappings or requested mapping to the caller.the workflow mapping to return. Null can be passed to return all mappings. Must be a valid workflow name.",
                "verb": "GET",
                "url": "rest/api/2/workflowscheme/:id/draft/workflow",
                "path": "/:id/draft/workflow",
                "responseType": "object"
            },
            "deleteDraftWorkflowMapping": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the name of the workflow to delete."
                    }
                ],
                "description": "Delete draft workflow mapping",
                "name": "deleteDraftWorkflowMapping",
                "details": "Delete the passed workflow from the draft workflow scheme.the name of the workflow to delete.",
                "verb": "DELETE",
                "url": "rest/api/2/workflowscheme/:id/draft/workflow",
                "path": "/:id/draft/workflow",
                "responseType": null
            },
            "updateDraftWorkflowMapping": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "workflow",
                        "type": "string"
                    },
                    {
                        "name": "issueTypes",
                        "type": "array"
                    },
                    {
                        "name": "defaultMapping",
                        "type": "boolean"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    }
                ],
                "queryParams": [
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the name of the workflow mapping to update."
                    }
                ],
                "description": "Update draft workflow mapping",
                "name": "updateDraftWorkflowMapping",
                "details": "Update the draft scheme to include the passed mapping.\n \n The body is a representation of the workflow mapping.\n Values not passed are assumed to indicate no change for that field.the name of the workflow mapping to update.",
                "verb": "PUT",
                "url": "rest/api/2/workflowscheme/:id/draft/workflow",
                "path": "/:id/draft/workflow",
                "responseType": "object"
            },
            "getIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "issueType",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "returnDraftIfExists",
                        "type": "boolean",
                        "description": "Default: falsewhen true indicates that a scheme's draft, if it exists, should be queried instead of\n                            the scheme itself."
                    }
                ],
                "description": "Get issue type",
                "name": "getIssueType",
                "details": "Returns the issue type mapping for the passed workflow scheme.Default: falsewhen true indicates that a scheme's draft, if it exists, should be queried instead of\n                            the scheme itself.",
                "verb": "GET",
                "url": "rest/api/2/workflowscheme/:id/issuetype/:issueType",
                "path": "/:id/issuetype/:issueType",
                "responseType": "object"
            },
            "deleteIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "issueType",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean",
                        "description": "when true will create and return a draft when the workflow scheme cannot be edited\n                            (e.g. when it is being used by a project)."
                    }
                ],
                "description": "Delete issue type",
                "name": "deleteIssueType",
                "details": "Remove the specified issue type mapping from the scheme.when true will create and return a draft when the workflow scheme cannot be edited\n                            (e.g. when it is being used by a project).",
                "verb": "DELETE",
                "url": "rest/api/2/workflowscheme/:id/issuetype/:issueType",
                "path": "/:id/issuetype/:issueType",
                "responseType": "object"
            },
            "setIssueType": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "issueType",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "issueType",
                        "type": "string"
                    },
                    {
                        "name": "workflow",
                        "type": "string"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    }
                ],
                "queryParams": [],
                "description": "Set issue type",
                "name": "setIssueType",
                "details": "Set the issue type mapping for the passed scheme.\n \n The passed representation can have its updateDraftIfNeeded flag set to true to indicate that\n the draft should be created/updated when the actual scheme cannot be edited.",
                "verb": "PUT",
                "url": "rest/api/2/workflowscheme/:id/issuetype/:issueType",
                "path": "/:id/issuetype/:issueType",
                "responseType": "object"
            },
            "getWorkflow": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the workflow mapping to return. Null can be passed to return all mappings. Must be a valid workflow name."
                    },
                    {
                        "name": "returnDraftIfExists",
                        "type": "boolean",
                        "description": "Default: falsewhen true indicates that a scheme's draft, if it exists, should be queried instead of\n                            the scheme itself."
                    }
                ],
                "description": "Get workflow",
                "name": "getWorkflow",
                "details": "Returns the workflow mappings or requested mapping to the caller for the passed scheme.the workflow mapping to return. Null can be passed to return all mappings. Must be a valid workflow name.Default: falsewhen true indicates that a scheme's draft, if it exists, should be queried instead of\n                            the scheme itself.",
                "verb": "GET",
                "url": "rest/api/2/workflowscheme/:id/workflow",
                "path": "/:id/workflow",
                "responseType": "object"
            },
            "deleteWorkflowMapping": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [],
                "queryParams": [
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the name of the workflow to delete."
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean",
                        "description": "flag to indicate if a draft should be created if necessary to delete the workflow\n                            from the scheme."
                    }
                ],
                "description": "Delete workflow mapping",
                "name": "deleteWorkflowMapping",
                "details": "Delete the passed workflow from the workflow scheme.the name of the workflow to delete.flag to indicate if a draft should be created if necessary to delete the workflow\n                            from the scheme.",
                "verb": "DELETE",
                "url": "rest/api/2/workflowscheme/:id/workflow",
                "path": "/:id/workflow",
                "responseType": null
            },
            "updateWorkflowMapping": {
                "urlParams": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "schema": [
                    {
                        "name": "workflow",
                        "type": "string"
                    },
                    {
                        "name": "issueTypes",
                        "type": "array"
                    },
                    {
                        "name": "defaultMapping",
                        "type": "boolean"
                    },
                    {
                        "name": "updateDraftIfNeeded",
                        "type": "boolean"
                    }
                ],
                "queryParams": [
                    {
                        "name": "workflowName",
                        "type": "string",
                        "description": "the name of the workflow mapping to update."
                    }
                ],
                "description": "Update workflow mapping",
                "name": "updateWorkflowMapping",
                "details": "Update the scheme to include the passed mapping.\n \n The body is a representation of the workflow mapping.\n Values not passed are assumed to indicate no change for that field.\n \n The passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft\n should be created/updated when the actual scheme cannot be edited.the name of the workflow mapping to update.",
                "verb": "PUT",
                "url": "rest/api/2/workflowscheme/:id/workflow",
                "path": "/:id/workflow",
                "responseType": "object"
            }
        }
    },
    "Worklog": {
        "name": "Worklog",
        "description": "",
        "methods": {
            "getIdsOfWorklogsDeletedSince": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "since",
                        "type": "number",
                        "description": "Default: 0a date time in unix timestamp format since when deleted worklogs will be returned."
                    }
                ],
                "description": "Get ids of worklogs deleted since",
                "name": "getIdsOfWorklogsDeletedSince",
                "details": "Returns worklogs id and delete time of worklogs that was deleted since given time.\n The returns set of worklogs is limited to 1000 elements.\n This API will not return worklogs deleted during last minute.Default: 0a date time in unix timestamp format since when deleted worklogs will be returned.",
                "verb": "GET",
                "url": "rest/api/2/worklog/deleted",
                "path": "/deleted",
                "responseType": "object"
            },
            "getWorklogsForIds": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "ids",
                        "type": "array"
                    }
                ],
                "queryParams": [],
                "description": "Get worklogs for ids",
                "name": "getWorklogsForIds",
                "details": "Returns worklogs for given worklog ids. Only worklogs to which the calling user has permissions, will be included in the result.\n The returns set of worklogs is limited to 1000 elements.",
                "verb": "POST",
                "url": "rest/api/2/worklog/list",
                "path": "/list",
                "responseType": "object"
            },
            "getIdsOfWorklogsModifiedSince": {
                "urlParams": [],
                "schema": [],
                "queryParams": [
                    {
                        "name": "since",
                        "type": "number",
                        "description": "Default: 0a date time in unix timestamp format since when updated worklogs will be returned."
                    }
                ],
                "description": "Get ids of worklogs modified since",
                "name": "getIdsOfWorklogsModifiedSince",
                "details": "Returns worklogs id and update time of worklogs that was updated since given time.\n The returns set of worklogs is limited to 1000 elements.\n This API will not return worklogs updated during last minute.Default: 0a date time in unix timestamp format since when updated worklogs will be returned.",
                "verb": "GET",
                "url": "rest/api/2/worklog/updated",
                "path": "/updated",
                "responseType": "object"
            }
        }
    },
    "Session": {
        "name": "Session",
        "description": "Implement a REST resource for acquiring a session cookie.",
        "methods": {
            "logout": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Logout",
                "name": "logout",
                "details": "Logs the current user out of JIRA, destroying the existing session, if any.",
                "verb": "DELETE",
                "url": "rest/auth/1/session",
                "path": "/1/session",
                "responseType": null
            },
            "currentUser": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Current user",
                "name": "currentUser",
                "details": "Returns information about the currently authenticated user's session. If the caller is not authenticated they\n will get a 401 Unauthorized status code.",
                "verb": "GET",
                "url": "rest/auth/1/session",
                "path": "/1/session",
                "responseType": "object"
            },
            "login": {
                "urlParams": [],
                "schema": [
                    {
                        "name": "username",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    }
                ],
                "queryParams": [],
                "description": "Login",
                "name": "login",
                "details": "Creates a new session for a user in JIRA. Once a session has been successfully created it can be used to access\n any of JIRA's remote APIs and also the web UI by passing the appropriate HTTP Cookie header.\n \n Note that it is generally preferrable to use HTTP BASIC authentication with the REST API. However, this resource\n may be used to mimic the behaviour of JIRA's log-in page (e.g. to display log-in errors to a user).\n Note that the response contains the Set-Cookie HTTP headers that must be honoured by the\n caller. If you are using a cookie-aware HTTP client then it will handle all Set-Cookie headers\n automatically. This is important because setting the JSESSIONID cookie alone may not be\n sufficient for the authentication to work.Schema{\"id\":\"https://docs.atlassian.com/jira/REST/schema/auth-success#\",\"title\":\"Auth Success\",\"type\":\"object\",\"properties\":{\"session\":{\"title\":\"Session Info\",\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}},\"additionalProperties\":false},\"loginInfo\":{\"title\":\"Login Info\",\"type\":\"object\",\"properties\":{\"failedLoginCount\":{\"type\":\"integer\"},\"loginCount\":{\"type\":\"integer\"},\"lastFailedLoginTime\":{\"type\":\"string\"},\"previousLoginTime\":{\"type\":\"string\"}},\"additionalProperties\":false}},\"additionalProperties\":false}",
                "verb": "POST",
                "url": "rest/auth/1/session",
                "path": "/1/session",
                "responseType": "object"
            }
        }
    },
    "Websudo": {
        "name": "Websudo",
        "description": "",
        "methods": {
            "release": {
                "urlParams": [],
                "schema": [],
                "queryParams": [],
                "description": "Release",
                "name": "release",
                "details": "This method invalidates the any current WebSudo session.",
                "verb": "DELETE",
                "url": "rest/auth/1/websudo",
                "path": "/1/websudo",
                "responseType": null
            }
        }
    }
}
